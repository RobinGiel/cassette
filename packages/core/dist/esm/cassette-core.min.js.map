{"version":3,"sources":["webpack://cassetteCore/webpack/universalModuleDefinition","webpack://cassetteCore/webpack/bootstrap","webpack://cassetteCore/external {\"root\":\"React\",\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\"}","webpack://cassetteCore/external {\"root\":\"PropTypes\",\"commonjs\":\"prop-types\",\"commonjs2\":\"prop-types\",\"amd\":\"prop-types\"}","webpack://cassetteCore/./src/utils/console.js","webpack://cassetteCore/./src/utils/createSingleGlobalContext.js","webpack://cassetteCore/./node_modules/array-find-index/index.js","webpack://cassetteCore/(webpack)/buildin/global.js","webpack://cassetteCore/./src/PlayerContext.js","webpack://cassetteCore/./src/GroupContext.js","webpack://cassetteCore/./src/constants.js","webpack://cassetteCore/./src/PlayerPropTypes.js","webpack://cassetteCore/./src/factories/createCustomMediaElement.js","webpack://cassetteCore/./src/utils/ShuffleManager.js","webpack://cassetteCore/./src/utils/isPlaylistValid.js","webpack://cassetteCore/./src/utils/getTrackSources.js","webpack://cassetteCore/./src/utils/findTrackIndexByUrl.js","webpack://cassetteCore/./src/utils/snapshot.js","webpack://cassetteCore/./src/utils/getSourceList.js","webpack://cassetteCore/./src/utils/getTimeRangesArray.js","webpack://cassetteCore/./src/utils/getRepeatStrategy.js","webpack://cassetteCore/./src/utils/convertToNumberWithinIntervalBounds.js","webpack://cassetteCore/./src/utils/getDisplayText.js","webpack://cassetteCore/./src/utils/parseTimeString.js","webpack://cassetteCore/./src/PlayerContextProvider.js","webpack://cassetteCore/./src/utils/getReactParentNameStack.js","webpack://cassetteCore/./src/PlayerContextConsumer.js","webpack://cassetteCore/./src/PlayerContextGroup.js","webpack://cassetteCore/./src/FullscreenContext.js","webpack://cassetteCore/./src/FullscreenContextProvider.js","webpack://cassetteCore/./src/playerContextFilter.js","webpack://cassetteCore/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","logWarning","log","console","logError","error","warn","packageVersion","version","_global","window","global","__cassette_contexts__","_ref","displayName","_ref$defaultValue","defaultValue","keysWillUpdate","ExistingContext","_console__WEBPACK_IMPORTED_MODULE_1__","flags","Context","react__WEBPACK_IMPORTED_MODULE_0__","prev","next","mask","__cassetteGetObservedBits","keys","observedBits","arr","predicate","ctx","Array","findIndex","TypeError","list","len","length","g","Function","eval","e","PlayerContext","createSingleGlobalContext","GroupContext","repeatStrategyOptions","requiredOnlyUnlessHasProp","propType","altPropName","warnedAboutDefiningBoth","props","propName","componentName","_len","arguments","rest","_key","isRequired","Error","controlKeyword","external_root_PropTypes_commonjs_prop_types_commonjs2_prop_types_amd_prop_types_default","a","oneOf","control","oneOfType","func","crossOriginAttribute","PlayerPropTypes_repeatStrategy","mediaSource","shape","src","string","type","mediaSessionAction","mediaSessionArtwork","sizes","PlayerPropTypes_track","url","sources","arrayOf","title","artist","album","artwork","duration","number","startingTime","isUnboundedStream","bool","meta","progressDirection","seekMode","aspectRatio","prop","undefined","split","some","isNaN","loopchange","srcrequest","factories_createCustomMediaElement","media","MutationObserver","dispatchEvent","Event","observe","attributes","attributeFilter","currentSrc","set","srcRequested","_goForward","forwardStack","backStack","currentItem","item","push","pop","_findNextItem","allowMore","nextItem","indexOf","_allItemsMatch","Math","floor","random","utils_ShuffleManager","constructor","options","_list","_forwardStack","_backStack","_currentItem","_allowBackShuffle","Boolean","allowBackShuffle","findNextItem","currentIndex","setCurrentIndex","findPreviousItem","pickNextItem","index","setList","setOptions","clear","utils_isPlaylistValid","playlist","blankSources","utils_getTrackSources","_playlist$index","utils_findTrackIndexByUrl","array_find_index_default","track","source","veryLongKey","versionKey","migrations","oldSnapshot","__unstable__","_objectSpread","_objectWithoutPropertiesLoose","[object Object]","utils_getSourceList","map","_","utils_getTimeRangesArray","timeRangesObj","timeRangesArray","start","end","utils_getRepeatStrategy","loop","cycle","utils_convertToNumberWithinIntervalBounds","min","max","Infinity","utils_getDisplayText","displayText","utils_parseTimeString","str","seconds","factor","times","slice","parseInt","playErrorHandler","err","warningMessage","Date","toLocaleTimeString","supportableMediaSessionActions","defaultState","paused","currentTime","seekPreviewTime","seekInProgress","awaitingResumeOnSeekComplete","awaitingPlayAfterTrackLoad","bufferedRanges","playedRanges","seekableRanges","stalled","shouldRequestPlayOnNextUpdate","mediaCannotPlay","maxKnownTime","getGoToTrackState","prevState","_ref$shouldPlay","shouldPlay","_ref$shouldForceLoad","shouldForceLoad","isNewTrack","activeTrackIndex","shouldLoadAsNew","trackLoading","awaitingForceLoad","PlayerContextProvider_PlayerContextProvider","external_root_React_commonjs_react_commonjs2_react_amd_react_","super","startingTrackIndex","initialStateSnapshot","restoredStateFromSnapshot","snapshot","_migratedSnapshot$ver","reduce","migration","volume","muted","shuffle","playbackRate","activeTrackSrc","restoredStateValues","awaitingPlay","useCurrentTime","newTrackIndex","restoreStateFromSnapshot","JSON","stringify","state","PlayerContextProvider_objectSpread","defaultVolume","defaultMuted","defaultRepeatStrategy","defaultShuffle","defaultPlaybackRate","setVolumeInProgress","autoplay","__playlist__","lastStableVolume","shuffler","videoHostElementList","videoHostOccupiedCallbacks","Map","videoHostVacatedCallbacks","onTrackPlaybackFailure","togglePause","selectTrackIndex","forwardSkip","backSkip","seekPreview","seekComplete","setVolume","setVolumeComplete","toggleMuted","toggleShuffle","setRepeatStrategy","setPlaybackRate","registerVideoHostElement","renderVideoIntoHostElement","unregisterVideoHostElement","updateVideoHostElement","handleMediaPlay","handleMediaPause","handleMediaSrcrequest","handleMediaEnded","handleMediaEmptied","handleMediaStalled","handleMediaCanplaythrough","handleMediaCanplay","handleMediaTimeupdate","handleMediaLoadeddata","handleMediaVolumechange","handleMediaDurationchange","handleMediaProgress","handleMediaLoopchange","handleMediaRatechange","componentDidMount","createMediaElement","_this$props","crossOrigin","autoplayDelayInSeconds","mediaElementRef","getPosterImageForTrack","getMediaTitleAttributeForTrack","onActiveTrackUpdate","_this$state","setAttribute","addEventListener","setMediaElementSources","mediaContainer","appendChild","setState","delayTimeout","setTimeout","nextProps","newPlaylist","baseNewState","prevSources","currentSources","componentDidUpdate","prevProps","newSources","prevTrack","newTrack","stealMediaSession","clearTimeout","snapshotUpdateTimeout","onStateSnapshot","getStateSnapshot","componentWillUnmount","removeEventListener","sourceElements","querySelectorAll","sourceElement","gapLengthTimeout","MediaSession","navigator","mediaSession","metadata","MediaMetadata","action","supportedMediaSessionActions","seekLength","mediaSessionSeekLengthInSeconds","forEach","handler","setActionHandler","firstChild","removeChild","document","createElement","load","event","hostElement","_ref2","onHostOccupied","onHostVacated","concat","cancelAnimationFrame","videoHostUpdateRaf","requestAnimationFrame","filter","elem","delete","parentNode","playing","oldHostElement","play","onVacated","onOccupied","_this$props2","loadFirstTrackOnPlaylistComplete","_this$state2","goToTrack","gapLengthInSeconds","_this$media","played","_this$props3","onTimeUpdate","_this$media2","activeTrack","activeTrackAtLastDurationChange","buffered","seekable","pause","playPromise","catch","Promise","reject","args","_this$props4","stayOnBackSkipThreshold","_this$state3","previousItem","_this$state4","targetTime","baseStateUpdate","_ref3","_ref4","ended","_this$state5","inProgress","volumeInBounds","repeatStrategy","rate","getControlProps","playerContext","awaitingPlayResume","onTogglePause","onSelectTrackIndex","onBackSkip","onForwardSkip","onSeekPreview","onSeekComplete","onSetVolume","onSetVolumeComplete","onToggleMuted","onToggleShuffle","onSetRepeatStrategy","onSetPlaybackRate","render","external_root_React_commonjs_react_commonjs2_react_amd_react_default","ref","hidden","Provider","children","defaultProps","maintainPlaybackRate","PlayerContextProvider_PlayerContextGroupMember","groupContext","registerMediaElement","mediaElement","unregisterMediaElement","_this$props5","PlayerContextProvider_objectWithoutPropertiesLoose","_extends","groupProps","src_PlayerContextProvider","Consumer","utils_getReactParentNameStack","componentInstance","parentStack","owner","_reactInternalFiber","_debugOwner","src_PlayerContextConsumer","filterList","warnedAboutFilterList","warning","parentName","unstable_observedBits","usedContext","src_PlayerContextGroup","enforceOneMediaSourceOnly","mediaElements","element","target","PlayerContextGroup_objectSpread","FullscreenContext","fullscreen","requestFullscreen","requestExitFullscreen","fullscreenStyle","width","height","FullscreenContextProvider_FullscreenContextProvider","handleFullscreenChange","fullscreenElement","fullscreenEnabled","webkitRequestFullscreen","mozRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","exitFullscreen","webkitExitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","mozExitFullscreen","documentFullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","getFullscreenContext","fullscreenContext","style","src_FullscreenContextProvider","src_playerContextFilter","component","contextPropNames","warned","childName","PlayerContextFilter","childProps","playerContextFilter_objectSpread","FullscreenContextConsumer","donotuse_PlayerContext","donotuse_FullscreenContext"],"mappings":"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","file":"esm/cassette-core.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"prop-types\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"prop-types\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cassetteCore\"] = factory(require(\"react\"), require(\"prop-types\"));\n\telse\n\t\troot[\"cassetteCore\"] = factory(root[\"React\"], root[\"PropTypes\"]);\n})((typeof self !== \"undefined\" ? self : this), function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","/* eslint-disable no-console */\n\nconst log = console.log.bind(console);\n\nexport const logError = console.error ? console.error.bind(console) : log;\nexport const logWarning = console.warn ? console.warn.bind(console) : log;\n","import { createContext } from 'react';\n\nimport { logWarning } from './console';\n\nconst packageVersion = require('../../package.json').version;\n\nconst _global = typeof window === 'undefined' ? global : window;\n_global.__cassette_contexts__ = _global.__cassette_contexts__ || {};\n\nfunction createSingleGlobalContext({\n  displayName,\n  defaultValue = null,\n  keysWillUpdate\n}) {\n  const ExistingContext = _global.__cassette_contexts__[displayName];\n  if (ExistingContext) {\n    if (ExistingContext.packageVersion !== packageVersion) {\n      logWarning(\n        `Warning: multiple versions of ${displayName} from the @cassette/core` +\n          ` package have been loaded. v${packageVersion} will be ignored and` +\n          ` v${ExistingContext.packageVersion} will be used instead.`\n      );\n    }\n    return ExistingContext;\n  }\n  // inspired by:\n  // https://github.com/philosaf/observed-bits/blob/master/src/index.js\n  const flags = {};\n  let i = 0;\n  for (const key of keysWillUpdate) {\n    flags[key] = 1 << i++;\n  }\n  const Context = createContext(defaultValue, function getChangedBits(\n    prev,\n    next\n  ) {\n    let mask = 0;\n    for (const key of keysWillUpdate) {\n      if (prev[key] !== next[key]) {\n        mask |= flags[key];\n      }\n    }\n    return mask;\n  });\n  Context.__cassetteGetObservedBits = keys => {\n    let observedBits = 0;\n    for (const key of keys) {\n      observedBits |= flags[key];\n    }\n    return observedBits;\n  };\n  Context.displayName = displayName;\n  Context.packageVersion = packageVersion;\n  _global.__cassette_contexts__[displayName] = Context;\n  return Context;\n}\n\nexport default createSingleGlobalContext;\n","'use strict';\nmodule.exports = function (arr, predicate, ctx) {\n\tif (typeof Array.prototype.findIndex === 'function') {\n\t\treturn arr.findIndex(predicate, ctx);\n\t}\n\n\tif (typeof predicate !== 'function') {\n\t\tthrow new TypeError('predicate must be a function');\n\t}\n\n\tvar list = Object(arr);\n\tvar len = list.length;\n\n\tif (len === 0) {\n\t\treturn -1;\n\t}\n\n\tfor (var i = 0; i < len; i++) {\n\t\tif (predicate.call(ctx, list[i], i, list)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import createSingleGlobalContext from './utils/createSingleGlobalContext';\n\n// TODO: test to make sure context contents stay in sync with\n// enumerated list here\n\nexport default createSingleGlobalContext({\n  displayName: 'PlayerContext',\n  keysWillUpdate: [\n    'playlist',\n    'activeTrackIndex',\n    'trackLoading',\n    'paused',\n    'currentTime',\n    'seekPreviewTime',\n    'seekInProgress',\n    'awaitingPlayResume',\n    'duration',\n    'bufferedRanges',\n    'playedRanges',\n    'seekableRanges',\n    'volume',\n    'muted',\n    'shuffle',\n    'stalled',\n    'playbackRate',\n    'setVolumeInProgress',\n    'repeatStrategy',\n    'mediaCannotPlay'\n  ]\n});\n","import createSingleGlobalContext from './utils/createSingleGlobalContext';\n\nexport default createSingleGlobalContext({\n  displayName: 'GroupContext',\n  keysWillUpdate: ['groupProps']\n});\n","export const repeatStrategyOptions = ['none', 'playlist', 'track'];\n","import PropTypes from 'prop-types';\n\nimport { repeatStrategyOptions } from './constants';\nimport { logWarning } from './utils/console';\n\nfunction requiredOnlyUnlessHasProp(propType, altPropName) {\n  let warnedAboutDefiningBoth = false;\n  function validate(props, propName, componentName, ...rest) {\n    if (propName in props) {\n      if (!warnedAboutDefiningBoth && altPropName in props) {\n        logWarning(\n          `Do not define both the '${propName}' and '${altPropName}' props.`\n        );\n        warnedAboutDefiningBoth = true;\n      }\n      return propType.isRequired(props, propName, componentName, ...rest);\n    }\n    if (!(altPropName in props)) {\n      return new Error(\n        `If the '${altPropName}' prop is not defined, '${propName}' must be.`\n      );\n    }\n  }\n  return validate;\n}\n\nexport const controlKeyword = PropTypes.oneOf([\n  'playpause',\n  'backskip',\n  'forwardskip',\n  'volume',\n  'mute',\n  'repeat',\n  'shuffle',\n  'progress',\n  'progressdisplay',\n  'fullscreen',\n  'spacer'\n]);\n\nexport const control = PropTypes.oneOfType([PropTypes.func, controlKeyword]);\n\nexport const crossOriginAttribute = PropTypes.oneOf([\n  'anonymous',\n  'use-credentials'\n]);\n\nexport const repeatStrategy = PropTypes.oneOf(repeatStrategyOptions);\n\nexport const mediaSource = PropTypes.shape({\n  src: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n});\n\nexport const mediaSessionAction = PropTypes.oneOf([\n  'play',\n  'pause',\n  'previoustrack',\n  'nexttrack',\n  'seekbackward',\n  'seekforward'\n]);\n\nexport const mediaSessionArtwork = PropTypes.shape({\n  src: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  type: PropTypes.string\n});\n\nexport const track = PropTypes.shape({\n  url: requiredOnlyUnlessHasProp(PropTypes.string, 'sources'),\n  sources: requiredOnlyUnlessHasProp(\n    PropTypes.arrayOf(mediaSource.isRequired),\n    'url'\n  ),\n  title: PropTypes.string.isRequired,\n  artist: PropTypes.string,\n  album: PropTypes.string,\n  artwork: PropTypes.arrayOf(mediaSessionArtwork.isRequired),\n  duration: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  startingTime: PropTypes.number,\n  isUnboundedStream: PropTypes.bool,\n  meta: PropTypes.object\n});\n\nexport const progressDirection = PropTypes.oneOf([\n  'left',\n  'right',\n  'up',\n  'down'\n]);\n\nexport const seekMode = PropTypes.oneOf(['paused', 'immediate', 'onrelease']);\n\nexport function aspectRatio(props, propName) {\n  const prop = props[propName];\n  if (prop === undefined) {\n    return;\n  }\n  if (\n    typeof prop !== 'string' ||\n    prop.split(':').length !== 2 ||\n    prop.split(':').some(isNaN)\n  ) {\n    return new Error(\n      `The ${propName} prop should be a string of the form 'x:y'. Example: 16:9`\n    );\n  }\n}\n","const loopchange = 'loopchange';\nconst srcrequest = 'srcrequest';\n\nfunction createCustomMediaElement(media) {\n  new MutationObserver(() => {\n    media.dispatchEvent(new Event(loopchange));\n  }).observe(media, {\n    attributes: true,\n    attributeFilter: ['loop']\n  });\n  // Don't let the media src property get modified directly.\n  // Instead, when it does get set, dispatch an event to be\n  // handled in a way that doesn't conflict with the loaded\n  // playlist.\n  Object.defineProperty(media, 'src', {\n    get: () => media.currentSrc,\n    set: src => {\n      const e = new Event(srcrequest);\n      e.srcRequested = src;\n      media.dispatchEvent(e);\n    }\n  });\n  return media;\n}\n\nexport default createCustomMediaElement;\n","/* ShuffleManager\n *\n * Manages navigation throughout a list which is:\n * - Sourced from another provided list\n * - In random order (except to avoid consecutive duplicates)\n * - Extended endlessly on-the-fly, as needed\n * - Able to have future history overwritten by non-random choices\n * - Able to swap source lists and maintain shuffle order for common members\n */\n\nexport class ShuffleManager {\n  constructor(list, options = {}) {\n    this._list = list;\n    this._forwardStack = [];\n    this._backStack = [];\n    this._currentItem = undefined;\n\n    this._allowBackShuffle = Boolean(options.allowBackShuffle);\n  }\n\n  findNextItem(currentIndex) {\n    if (currentIndex !== undefined) {\n      this.setCurrentIndex(currentIndex);\n    }\n    this._currentItem = _findNextItem(\n      this._list,\n      this._forwardStack,\n      this._backStack,\n      this._currentItem,\n      true\n    );\n    return this._currentItem;\n  }\n\n  findPreviousItem(currentIndex) {\n    if (currentIndex !== undefined) {\n      this.setCurrentIndex(currentIndex);\n    }\n    this._currentItem = _findNextItem(\n      this._list,\n      this._backStack,\n      this._forwardStack,\n      this._currentItem,\n      this._allowBackShuffle\n    );\n    return this._currentItem;\n  }\n\n  pickNextItem(index, currentIndex) {\n    if (currentIndex !== undefined) {\n      this.setCurrentIndex(currentIndex);\n    }\n    if (this._list[index] === undefined) {\n      return undefined;\n    }\n    if (this._currentItem !== undefined) {\n      this._backStack.push(this._currentItem);\n    }\n    this._forwardStack.length = 0;\n    this._currentItem = this._list[index];\n    return this._currentItem;\n  }\n\n  setList(list) {\n    this._list = list;\n  }\n\n  setOptions(options) {\n    for (const o of Object.keys(options)) {\n      switch (o) {\n        case 'allowBackShuffle':\n          this[`_${o}`] = Boolean(options[o]);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  setCurrentIndex(currentIndex) {\n    const item = this._list[currentIndex];\n    if (this._currentItem !== item) {\n      this.clear();\n      this._currentItem = item;\n    }\n  }\n\n  clear() {\n    this._forwardStack.length = 0;\n    this._backStack.length = 0;\n    this._currentItem = undefined;\n  }\n}\n\nfunction _goForward(n, forwardStack, backStack, currentItem) {\n  let item = currentItem;\n  for (let i = 0; i < n; i++) {\n    if (!forwardStack.length) {\n      // rollback before erroring (note stack reversal)\n      _goForward(i, backStack, forwardStack, item);\n      throw `Moving ${n} places was not possible!`;\n    }\n    backStack.push(item);\n    item = forwardStack.pop();\n  }\n  return item;\n}\n\nfunction _allItemsMatch(list, item) {\n  if (!list.length) {\n    return false;\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (item !== list[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction _findNextItem(list, forwardStack, backStack, currentItem, allowMore) {\n  let item = currentItem;\n  if (!list.length) {\n    return undefined;\n  }\n  for (let i = 1; i <= forwardStack.length; i++) {\n    if (list.indexOf(forwardStack[forwardStack.length - i]) !== -1) {\n      return _goForward(i, forwardStack, backStack, item);\n    }\n  }\n  if (!allowMore) {\n    return undefined;\n  }\n  if (_allItemsMatch(list, item)) {\n    // we can serve this as our \"next\" item but we\n    // won't modify our history since it's the same.\n    return item;\n  }\n  let nextItem;\n  do {\n    nextItem = list[Math.floor(Math.random() * list.length)];\n  } while (item === nextItem || nextItem === undefined);\n  // if we're skipping items that aren't in our current list we may\n  // have some items in our forwardStack - make sure we move to the front.\n  item = _goForward(forwardStack.length, forwardStack, backStack, item);\n  if (item !== undefined) {\n    backStack.push(item);\n  }\n  return nextItem;\n}\n\nexport default ShuffleManager;\n","function isPlaylistValid(playlist) {\n  return Boolean(playlist && playlist.length);\n}\n\nexport default isPlaylistValid;\n","import isPlaylistValid from './isPlaylistValid';\n\nconst blankSources = [{ src: '' }];\n\nfunction getTrackSources(playlist, index) {\n  if (!isPlaylistValid(playlist)) {\n    return blankSources;\n  }\n  const { sources, url } = playlist[index];\n  if (sources) {\n    return sources.length ? sources : blankSources;\n  }\n  return [{ src: url }];\n}\n\nexport default getTrackSources;\n","import arrayFindIndex from 'array-find-index';\n\nfunction findTrackIndexByUrl(playlist, url) {\n  return arrayFindIndex(playlist, track => {\n    if (track.sources) {\n      return arrayFindIndex(track.sources, source => source.src === url) !== -1;\n    }\n    return track.url && url === track.url;\n  });\n}\n\nexport default findTrackIndexByUrl;\n","import isPlaylistValid from './isPlaylistValid';\nimport getTrackSources from './getTrackSources';\nimport findTrackIndexByUrl from './findTrackIndexByUrl';\n\nconst veryLongKey =\n  '__highly_unstable_snapshot_internals_which_will_break_your_app_if_you_use_them_directly__';\nconst versionKey = '__cassette_snapshot_version__';\n\n// IMPORTANT: new migrations *must* always be added to the end since\n// the tracked snapshot version is based on the migration index.\n// If there is a crash-inducing bug in an existing migration, it can be patched\n// in-place, but it should never be removed from the migrations array.\nconst migrations = [\n  oldSnapshot => {\n    const { __unstable__, ...rest } = oldSnapshot;\n    return {\n      ...rest,\n      [veryLongKey]: __unstable__\n    };\n  }\n];\n\nexport function getStateSnapshot(state) {\n  const {\n    paused,\n    currentTime,\n    activeTrackIndex,\n    volume,\n    muted,\n    loop,\n    cycle,\n    shuffle,\n    playbackRate,\n    duration,\n    __playlist__\n  } = state;\n  return {\n    [versionKey]: migrations.length,\n    [veryLongKey]: {\n      paused,\n      // currentTime can't be restored for unbounded live streams\n      currentTime: duration === Infinity ? 0 : currentTime,\n      activeTrackIndex,\n      volume,\n      muted,\n      loop,\n      cycle,\n      shuffle,\n      playbackRate,\n      activeTrackSrc: isPlaylistValid(__playlist__)\n        ? getTrackSources(__playlist__, activeTrackIndex)[0].src\n        : null\n    }\n  };\n}\n\nexport function restoreStateFromSnapshot(snapshot, props) {\n  const migratedSnapshot = migrations\n    .slice(snapshot[versionKey] || 0)\n    .reduce((oldSnapshot, migration) => migration(oldSnapshot), snapshot);\n  const {\n    paused,\n    currentTime,\n    activeTrackIndex,\n    volume,\n    muted,\n    loop,\n    cycle,\n    shuffle,\n    playbackRate,\n    activeTrackSrc\n  } = migratedSnapshot[veryLongKey];\n  const restoredStateValues = {};\n  if (isPlaylistValid(props.playlist) && typeof paused === 'boolean') {\n    // using awaitingPlay instead of paused triggers an animation\n    restoredStateValues.awaitingPlay = !paused;\n  }\n  if (typeof volume === 'number' && volume >= 0 && volume <= 1) {\n    restoredStateValues.volume = volume;\n  }\n  if (typeof muted === 'boolean') {\n    restoredStateValues.muted = muted;\n  }\n  if (typeof loop === 'boolean') {\n    restoredStateValues.loop = loop;\n  }\n  if (typeof cycle === 'boolean') {\n    restoredStateValues.cycle = cycle;\n  }\n  if (typeof shuffle === 'boolean') {\n    restoredStateValues.shuffle = shuffle;\n  }\n  if (typeof playbackRate === 'number') {\n    restoredStateValues.playbackRate = playbackRate;\n  }\n  let useCurrentTime = false;\n  if (\n    typeof activeTrackSrc === 'string' &&\n    typeof activeTrackIndex === 'number' &&\n    activeTrackIndex >= 0\n  ) {\n    // let's try staying on the same track index\n    const currentSrc =\n      props.playlist[activeTrackIndex] &&\n      getTrackSources(props.playlist, activeTrackIndex)[0].src;\n    if (currentSrc && activeTrackSrc === currentSrc) {\n      restoredStateValues.activeTrackIndex = activeTrackIndex;\n      useCurrentTime = true;\n    } else {\n      /* if the track we were playing before is in the new playlist,\n       * update the activeTrackIndex.\n       */\n      const newTrackIndex = findTrackIndexByUrl(props.playlist, activeTrackSrc);\n      if (newTrackIndex !== -1) {\n        restoredStateValues.activeTrackIndex = newTrackIndex;\n        useCurrentTime = true;\n      }\n    }\n  }\n  if (useCurrentTime && typeof currentTime === 'number' && currentTime >= 0) {\n    restoredStateValues.currentTime = currentTime;\n  }\n  return restoredStateValues;\n}\n","import getTrackSources from './getTrackSources';\n\n// collapses playlist into flat list containing\n// the first source url for each track\nfunction getSourceList(playlist) {\n  return (playlist || []).map((_, i) => getTrackSources(playlist, i)[0].src);\n}\n\nexport default getSourceList;\n","function getTimeRangesArray(timeRangesObj) {\n  const timeRangesArray = Array(timeRangesObj.length);\n  for (let i = 0; i < timeRangesObj.length; i++) {\n    timeRangesArray[i] = {\n      start: timeRangesObj.start(i),\n      end: timeRangesObj.end(i)\n    };\n  }\n  return timeRangesArray;\n}\n\nexport default getTimeRangesArray;\n","function getRepeatStrategy(loop, cycle) {\n  if (loop) {\n    return 'track';\n  }\n  if (cycle) {\n    return 'playlist';\n  }\n  return 'none';\n}\n\nexport default getRepeatStrategy;\n","function convertToNumberWithinIntervalBounds(number, min, max) {\n  min = typeof min === 'number' ? min : -Infinity;\n  max = typeof max === 'number' ? max : Infinity;\n  return Math.max(min, Math.min(number, max));\n}\n\nexport default convertToNumberWithinIntervalBounds;\n","function getDisplayText(track) {\n  if (!track) {\n    return '';\n  }\n  if (track.displayText) {\n    // TODO: Remove this check when support for the displayText prop is gone.\n    return track.displayText;\n  }\n  if (track.title && track.artist) {\n    return `${track.artist} - ${track.title}`;\n  }\n  return track.title || track.artist || track.album || '';\n}\n\nexport default getDisplayText;\n","function parseTimeString(str) {\n  let seconds = 0;\n  let factor = 1;\n  const times = str.split(':').slice(-3);\n  while (times.length > 0) {\n    seconds += factor * parseInt(times.pop(), 10);\n    factor *= 60;\n  }\n  return seconds;\n}\n\nexport default parseTimeString;\n","import React, { Component, Fragment, createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport arrayFindIndex from 'array-find-index';\n\nimport PlayerContext from './PlayerContext';\nimport GroupContext from './GroupContext';\nimport * as PlayerPropTypes from './PlayerPropTypes';\nimport createCustomMediaElement from './factories/createCustomMediaElement';\nimport ShuffleManager from './utils/ShuffleManager';\nimport { getStateSnapshot, restoreStateFromSnapshot } from './utils/snapshot';\nimport getSourceList from './utils/getSourceList';\nimport getTrackSources from './utils/getTrackSources';\nimport getTimeRangesArray from './utils/getTimeRangesArray';\nimport findTrackIndexByUrl from './utils/findTrackIndexByUrl';\nimport isPlaylistValid from './utils/isPlaylistValid';\nimport getRepeatStrategy from './utils/getRepeatStrategy';\nimport convertToNumberWithinIntervalBounds from './utils/convertToNumberWithinIntervalBounds';\nimport { logError, logWarning } from './utils/console';\nimport getDisplayText from './utils/getDisplayText';\nimport parseTimeString from './utils/parseTimeString';\nimport { repeatStrategyOptions } from './constants';\n\nfunction playErrorHandler(err) {\n  logError(err);\n  if (err.name === 'NotAllowedError') {\n    const warningMessage =\n      'Media playback failed at ' +\n      new Date().toLocaleTimeString() +\n      '! (Perhaps autoplay is disabled in this browser.)';\n    logWarning(warningMessage);\n  }\n}\n\n// Existing Media Session API implementations have default handlers\n// for play/pause, and may yield unexpected behavior if custom\n// play/pause handlers are defined - so let's leave them be.\nconst supportableMediaSessionActions = [\n  'previoustrack',\n  'nexttrack',\n  'seekbackward',\n  'seekforward'\n];\n\nconst defaultState = {\n  // indicates whether media player should be paused\n  paused: true,\n  // elapsed time for active track, in seconds\n  currentTime: 0,\n  // The most recent targeted time, in seconds, for seek preview\n  seekPreviewTime: 0,\n  /* true if the user is currently dragging the mouse\n   * to seek a new track position\n   */\n  seekInProgress: false,\n  /* true if media was playing when seek previewing began,\n   * it was paused, and it should be resumed on seek\n   * complete\n   */\n  awaitingResumeOnSeekComplete: false,\n  // true if media will play once new track has loaded\n  awaitingPlayAfterTrackLoad: false,\n  // the duration in seconds of the loaded track\n  duration: 0,\n  // array describing the buffered ranges in the loaded track\n  bufferedRanges: [],\n  // array describing the already-played ranges in the loaded track\n  playedRanges: [],\n  // array describing the seekable ranges in the loaded track\n  seekableRanges: [],\n  // true if the media is currently stalled pending data buffering\n  stalled: false,\n  // true if the active track should play on the next componentDidUpdate\n  shouldRequestPlayOnNextUpdate: false,\n  /* true if an error occurs while fetching the active track media data\n   * or if its type is not a supported media format\n   */\n  mediaCannotPlay: false,\n  // maximum currentTime since the current track has been playing\n  maxKnownTime: 0\n};\n\n// assumes playlist is valid\nfunction getGoToTrackState({\n  prevState,\n  index,\n  track,\n  shouldPlay = true,\n  shouldForceLoad = false\n}) {\n  const isNewTrack = prevState.activeTrackIndex !== index;\n  const shouldLoadAsNew = Boolean(isNewTrack || shouldForceLoad);\n  const currentTime = track.startingTime || 0;\n  let duration = 0;\n  if (track.duration) {\n    if (typeof track.duration === 'string') {\n      duration = parseTimeString(track.duration);\n    } else {\n      duration = track.duration;\n    }\n  }\n  return {\n    duration,\n    activeTrackIndex: index,\n    trackLoading: shouldLoadAsNew,\n    mediaCannotPlay: prevState.mediaCannotPlay && !shouldLoadAsNew,\n    currentTime: convertToNumberWithinIntervalBounds(currentTime, 0),\n    loop: shouldLoadAsNew ? false : prevState.loop,\n    shouldRequestPlayOnNextUpdate: Boolean(shouldPlay),\n    awaitingPlayAfterTrackLoad: Boolean(shouldPlay),\n    awaitingForceLoad: Boolean(shouldForceLoad),\n    maxKnownTime: shouldLoadAsNew ? 0 : prevState.maxKnownTime\n  };\n}\n\n/**\n * Wraps an area which shares a common [`playerContext`](#playercontext)\n */\nexport class PlayerContextProvider extends Component {\n  constructor(props) {\n    super(props);\n    let currentTime = 0;\n    const activeTrackIndex = convertToNumberWithinIntervalBounds(\n      props.startingTrackIndex,\n      0\n    );\n    if (isPlaylistValid(props.playlist) && props.playlist[activeTrackIndex]) {\n      currentTime = props.playlist[activeTrackIndex].startingTime || 0;\n    }\n    const { initialStateSnapshot } = props;\n    let restoredStateFromSnapshot = {};\n    if (initialStateSnapshot) {\n      try {\n        restoredStateFromSnapshot = restoreStateFromSnapshot(\n          initialStateSnapshot,\n          props\n        );\n      } catch (err) {\n        logWarning(err);\n        logWarning('Loading Cassette state from snapshot failed.');\n        logWarning(\n          `Failed snapshot:\\n${JSON.stringify(initialStateSnapshot, null, 2)}`\n        );\n      }\n    }\n    this.state = {\n      ...defaultState,\n      // index matching requested track (whether track has loaded or not)\n      activeTrackIndex,\n      // whether we're waiting on loading metadata for the active track\n      trackLoading: isPlaylistValid(props.playlist),\n      // the current timestamp on the active track in seconds\n      currentTime: convertToNumberWithinIntervalBounds(currentTime, 0),\n      // the latest volume of the media, between 0 and 1.\n      volume: convertToNumberWithinIntervalBounds(props.defaultVolume, 0, 1),\n      // true if the media has been muted\n      muted: props.defaultMuted,\n      // whether to loop the active track\n      loop: props.defaultRepeatStrategy === 'track',\n      // true if playlist should continue at start after completion\n      cycle: props.defaultRepeatStrategy === 'playlist',\n      // whether to randomly pick next track from playlist after one finishes\n      shuffle: props.defaultShuffle,\n      // Rate at which media should be played. 1.0 is normal speed.\n      playbackRate: props.defaultPlaybackRate,\n      // true if user is currently dragging mouse to change the volume\n      setVolumeInProgress: false,\n      // initialize shouldRequestPlayOnNextUpdate from autoplay prop\n      shouldRequestPlayOnNextUpdate:\n        props.autoplay && isPlaylistValid(props.playlist),\n      awaitingForceLoad: false,\n      // playlist prop copied to state (for getDerivedStateFromProps)\n      __playlist__: props.playlist,\n      // load overrides from previously-captured state snapshot\n      ...restoredStateFromSnapshot\n    };\n\n    // volume at last time we were unmuted and not actively setting volume\n    this.lastStableVolume = this.state.volume;\n\n    // used to keep track of play history when we are shuffling\n    this.shuffler = new ShuffleManager(getSourceList(props.playlist), {\n      allowBackShuffle: props.allowBackShuffle\n    });\n\n    // html media element used for playback\n    this.media = null;\n\n    this.videoHostElementList = [];\n    this.videoHostOccupiedCallbacks = new Map();\n    this.videoHostVacatedCallbacks = new Map();\n\n    // bind internal methods\n    this.onTrackPlaybackFailure = this.onTrackPlaybackFailure.bind(this);\n\n    // bind callback methods to pass to descendant elements\n    this.togglePause = this.togglePause.bind(this);\n    this.selectTrackIndex = this.selectTrackIndex.bind(this);\n    this.forwardSkip = this.forwardSkip.bind(this);\n    this.backSkip = this.backSkip.bind(this);\n    this.seekPreview = this.seekPreview.bind(this);\n    this.seekComplete = this.seekComplete.bind(this);\n    this.setVolume = this.setVolume.bind(this);\n    this.setVolumeComplete = this.setVolumeComplete.bind(this);\n    this.toggleMuted = this.toggleMuted.bind(this);\n    this.toggleShuffle = this.toggleShuffle.bind(this);\n    this.setRepeatStrategy = this.setRepeatStrategy.bind(this);\n    this.setPlaybackRate = this.setPlaybackRate.bind(this);\n    this.registerVideoHostElement = this.registerVideoHostElement.bind(this);\n    this.renderVideoIntoHostElement = this.renderVideoIntoHostElement.bind(\n      this\n    );\n    this.unregisterVideoHostElement = this.unregisterVideoHostElement.bind(\n      this\n    );\n    this.updateVideoHostElement = this.updateVideoHostElement.bind(this);\n\n    // bind media event handlers\n    this.handleMediaPlay = this.handleMediaPlay.bind(this);\n    this.handleMediaPause = this.handleMediaPause.bind(this);\n    this.handleMediaSrcrequest = this.handleMediaSrcrequest.bind(this);\n    this.handleMediaEnded = this.handleMediaEnded.bind(this);\n    this.handleMediaEmptied = this.handleMediaEmptied.bind(this);\n    this.handleMediaStalled = this.handleMediaStalled.bind(this);\n    this.handleMediaCanplaythrough = this.handleMediaCanplaythrough.bind(this);\n    this.handleMediaCanplay = this.handleMediaCanplay.bind(this);\n    this.handleMediaTimeupdate = this.handleMediaTimeupdate.bind(this);\n    this.handleMediaLoadeddata = this.handleMediaLoadeddata.bind(this);\n    this.handleMediaVolumechange = this.handleMediaVolumechange.bind(this);\n    this.handleMediaDurationchange = this.handleMediaDurationchange.bind(this);\n    this.handleMediaProgress = this.handleMediaProgress.bind(this);\n    this.handleMediaLoopchange = this.handleMediaLoopchange.bind(this);\n    this.handleMediaRatechange = this.handleMediaRatechange.bind(this);\n  }\n\n  componentDidMount() {\n    const media = (this.media = createCustomMediaElement(\n      this.props.createMediaElement()\n    ));\n\n    const {\n      defaultPlaybackRate,\n      crossOrigin,\n      playlist,\n      autoplayDelayInSeconds,\n      mediaElementRef,\n      getPosterImageForTrack,\n      getMediaTitleAttributeForTrack,\n      onActiveTrackUpdate\n    } = this.props;\n    const {\n      volume,\n      muted,\n      playbackRate,\n      loop,\n      activeTrackIndex,\n      shouldRequestPlayOnNextUpdate\n    } = this.state;\n\n    // initialize media properties\n    // We used to set currentTime here.. now waiting for loadeddata.\n    // This avoids an issue where some browsers ignore or delay currentTime\n    // updates when in the HAVE_NOTHING state.\n    media.defaultPlaybackRate = defaultPlaybackRate;\n    if (crossOrigin) {\n      media.crossOrigin = crossOrigin;\n    }\n    media.volume = volume;\n    media.muted = muted;\n    media.playbackRate = playbackRate;\n    media.loop = loop;\n    media.setAttribute('playsinline', '');\n    media.setAttribute('webkit-playsinline', '');\n    media.setAttribute('preload', 'metadata');\n    media.setAttribute(\n      'poster',\n      getPosterImageForTrack(playlist[activeTrackIndex])\n    );\n    media.setAttribute(\n      'title',\n      getMediaTitleAttributeForTrack(playlist[activeTrackIndex])\n    );\n    // add listeners for media events\n    media.addEventListener('play', this.handleMediaPlay);\n    media.addEventListener('pause', this.handleMediaPause);\n    media.addEventListener('ended', this.handleMediaEnded);\n    media.addEventListener('stalled', this.handleMediaStalled);\n    media.addEventListener('emptied', this.handleMediaEmptied);\n    media.addEventListener('canplay', this.handleMediaCanplay);\n    media.addEventListener('canplaythrough', this.handleMediaCanplaythrough);\n    media.addEventListener('timeupdate', this.handleMediaTimeupdate);\n    media.addEventListener('loadeddata', this.handleMediaLoadeddata);\n    media.addEventListener('volumechange', this.handleMediaVolumechange);\n    media.addEventListener('durationchange', this.handleMediaDurationchange);\n    media.addEventListener('progress', this.handleMediaProgress);\n    media.addEventListener('ratechange', this.handleMediaRatechange);\n    // add listeners for special events\n    media.addEventListener('srcrequest', this.handleMediaSrcrequest);\n    media.addEventListener('loopchange', this.handleMediaLoopchange);\n\n    // set source elements for current track\n    this.setMediaElementSources();\n\n    // initially mount media element in the hidden container (this may change)\n    this.mediaContainer.appendChild(media);\n\n    if (shouldRequestPlayOnNextUpdate) {\n      this.setState({\n        shouldRequestPlayOnNextUpdate: false\n      });\n      this.delayTimeout = setTimeout(() => {\n        this.togglePause(false);\n      }, autoplayDelayInSeconds * 1000);\n    }\n\n    if (mediaElementRef) {\n      mediaElementRef(media);\n    }\n\n    if (onActiveTrackUpdate) {\n      onActiveTrackUpdate(playlist[activeTrackIndex], activeTrackIndex);\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const newPlaylist = nextProps.playlist;\n\n    if (newPlaylist === prevState.__playlist__) {\n      // reference comparison is equal so we'll\n      // assume the playlist is unchanged.\n      return null;\n    }\n\n    const baseNewState = {\n      __playlist__: newPlaylist\n    };\n\n    // check if the new playlist is invalid\n    if (!isPlaylistValid(newPlaylist)) {\n      return {\n        ...defaultState,\n        ...baseNewState,\n        activeTrackIndex: 0,\n        trackLoading: false\n      };\n    }\n\n    // check if the activeTrackIndex doesn't need to be updated\n    const prevSources = getTrackSources(\n      prevState.__playlist__,\n      prevState.activeTrackIndex\n    );\n\n    if (newPlaylist[prevState.activeTrackIndex]) {\n      // the sources if we stay on the same track index\n      const currentSources = getTrackSources(\n        newPlaylist,\n        prevState.activeTrackIndex\n      );\n      // non-comprehensive but probably accurate check\n      if (prevSources[0].src === currentSources[0].src) {\n        // our active track index already matches\n        return baseNewState;\n      }\n    }\n\n    /* if the track we're already playing is in the new playlist, update the\n     * activeTrackIndex.\n     */\n    const newTrackIndex = findTrackIndexByUrl(newPlaylist, prevSources[0].src);\n    if (newTrackIndex !== -1) {\n      return {\n        ...baseNewState,\n        activeTrackIndex: newTrackIndex\n      };\n    }\n\n    // if not, then load the first track in the new playlist, and pause.\n    return {\n      ...baseNewState,\n      ...getGoToTrackState({\n        prevState,\n        track: newPlaylist[0],\n        index: 0,\n        shouldPlay: false,\n        shouldForceLoad: true\n      }),\n      mediaCannotPlay: false,\n      awaitingPlayAfterTrackLoad: false\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.media.defaultPlaybackRate = this.props.defaultPlaybackRate;\n    this.media.crossOrigin = this.props.crossOrigin;\n\n    this.shuffler.setList(getSourceList(this.props.playlist));\n    this.shuffler.setOptions({\n      allowBackShuffle: this.props.allowBackShuffle\n    });\n\n    const prevSources = getTrackSources(\n      prevProps.playlist,\n      prevState.activeTrackIndex\n    );\n    const newSources = getTrackSources(\n      this.props.playlist,\n      this.state.activeTrackIndex\n    );\n    const prevTrack = prevProps.playlist[prevState.activeTrackIndex];\n    const newTrack = this.props.playlist[this.state.activeTrackIndex];\n    if (\n      this.state.awaitingForceLoad ||\n      prevSources[0].src !== newSources[0].src\n    ) {\n      this.setMediaElementSources();\n      this.media.setAttribute(\n        'poster',\n        this.props.getPosterImageForTrack(newTrack)\n      );\n      this.media.setAttribute(\n        'title',\n        this.props.getMediaTitleAttributeForTrack(newTrack)\n      );\n      this.setState({\n        awaitingForceLoad: false\n      });\n      if (!this.state.shuffle) {\n        // after toggling off shuffle, we defer clearing the shuffle\n        // history until we actually change tracks - if the user quickly\n        // toggles  shuffle off then back on again, we don't want to have\n        // lost our history.\n        this.shuffler.clear();\n      }\n    }\n\n    if (this.props.onActiveTrackUpdate && prevTrack !== newTrack) {\n      this.props.onActiveTrackUpdate(newTrack, this.state.activeTrackIndex);\n    }\n\n    if (prevProps !== this.props && !this.media.paused) {\n      // update running media session based on new props\n      this.stealMediaSession();\n    }\n\n    if (this.state.shouldRequestPlayOnNextUpdate) {\n      this.setState({\n        shouldRequestPlayOnNextUpdate: false\n      });\n      // media.currentSrc is updated asynchronously so we should\n      // play async to avoid weird intermediate state issues\n      setTimeout(() => {\n        this.togglePause(false);\n      });\n    }\n\n    clearTimeout(this.snapshotUpdateTimeout);\n    this.snapshotUpdateTimeout = setTimeout(() => {\n      if (this.props.onStateSnapshot) {\n        this.props.onStateSnapshot(getStateSnapshot(this.state));\n      }\n    }, 100);\n  }\n\n  componentWillUnmount() {\n    const { media } = this;\n    // Media element creation will have failed if MutationObserver isn't\n    // supported by the browser. The parent might use an Error Boundary\n    // to display a fallback and so we try to avoid triggering *additional*\n    // errors while the component unmounts.\n    if (media) {\n      // remove listeners for media events\n      media.removeEventListener('play', this.handleMediaPlay);\n      media.removeEventListener('pause', this.handleMediaPause);\n      media.removeEventListener('ended', this.handleMediaEnded);\n      media.removeEventListener('stalled', this.handleMediaStalled);\n      media.removeEventListener('emptied', this.handleMediaEmptied);\n      media.removeEventListener(\n        'canplaythrough',\n        this.handleMediaCanplaythrough\n      );\n      media.removeEventListener('canplay', this.handleMediaCanplay);\n      media.removeEventListener('timeupdate', this.handleMediaTimeupdate);\n      media.removeEventListener('loadeddata', this.handleMediaLoadeddata);\n      media.removeEventListener('volumechange', this.handleMediaVolumechange);\n      media.removeEventListener(\n        'durationchange',\n        this.handleMediaDurationchange\n      );\n      media.removeEventListener('progress', this.handleMediaProgress);\n      media.removeEventListener('ratechange', this.handleMediaRatechange);\n      // remove special event listeners on the media element\n      media.removeEventListener('srcrequest', this.handleMediaSrcrequest);\n      media.removeEventListener('loopchange', this.handleMediaLoopchange);\n\n      const sourceElements = media.querySelectorAll('source');\n      for (const sourceElement of sourceElements) {\n        sourceElement.removeEventListener('error', this.onTrackPlaybackFailure);\n      }\n    }\n    clearTimeout(this.gapLengthTimeout);\n    clearTimeout(this.delayTimeout);\n  }\n\n  stealMediaSession() {\n    if (\n      // eslint-disable-next-line no-undef\n      !(window.MediaSession && navigator.mediaSession instanceof MediaSession)\n    ) {\n      return;\n    }\n    // eslint-disable-next-line no-undef\n    navigator.mediaSession.metadata = new MediaMetadata(\n      this.props.playlist[this.state.activeTrackIndex]\n    );\n    supportableMediaSessionActions\n      .map(action => {\n        if (this.props.supportedMediaSessionActions.indexOf(action) === -1) {\n          return null;\n        }\n        const seekLength = this.props.mediaSessionSeekLengthInSeconds;\n        switch (action) {\n          case 'play':\n            return this.togglePause.bind(this, false);\n          case 'pause':\n            return this.togglePause.bind(this, true);\n          case 'previoustrack':\n            return this.backSkip;\n          case 'nexttrack':\n            return this.forwardSkip;\n          case 'seekbackward':\n            return () => (this.media.currentTime -= seekLength);\n          case 'seekforward':\n            return () => (this.media.currentTime += seekLength);\n          default:\n            return undefined;\n        }\n      })\n      .forEach((handler, i) => {\n        navigator.mediaSession.setActionHandler(\n          supportableMediaSessionActions[i],\n          handler\n        );\n      });\n  }\n\n  setMediaElementSources() {\n    // remove current sources\n    const { playlist } = this.props;\n    let firstChild;\n    while ((firstChild = this.media.firstChild)) {\n      this.media.removeChild(firstChild);\n    }\n    if (isPlaylistValid(playlist)) {\n      const sources = getTrackSources(playlist, this.state.activeTrackIndex);\n      // add new sources\n      for (const source of sources) {\n        const sourceElement = document.createElement('source');\n        sourceElement.src = source.src;\n        if (source.type) {\n          sourceElement.type = source.type;\n        }\n        sourceElement.addEventListener('error', this.onTrackPlaybackFailure);\n        this.media.appendChild(sourceElement);\n      }\n    }\n    // cancel playback and re-scan new sources\n    this.media.load();\n  }\n\n  onTrackPlaybackFailure(event) {\n    this.setState({\n      mediaCannotPlay: true\n    });\n    if (this.props.onTrackPlaybackFailure) {\n      this.props.onTrackPlaybackFailure(\n        this.props.playlist[this.state.activeTrackIndex],\n        this.state.activeTrackIndex,\n        event\n      );\n    }\n  }\n\n  registerVideoHostElement(hostElement, { onHostOccupied, onHostVacated }) {\n    this.videoHostElementList = this.videoHostElementList.concat(hostElement);\n    this.videoHostOccupiedCallbacks.set(hostElement, onHostOccupied);\n    this.videoHostVacatedCallbacks.set(hostElement, onHostVacated);\n  }\n\n  renderVideoIntoHostElement(hostElement) {\n    if (this.videoHostElementList.indexOf(hostElement) === -1) {\n      return;\n    }\n    cancelAnimationFrame(this.videoHostUpdateRaf);\n    this.videoHostUpdateRaf = requestAnimationFrame(() =>\n      this.updateVideoHostElement(hostElement)\n    );\n  }\n\n  unregisterVideoHostElement(hostElement) {\n    this.videoHostElementList = this.videoHostElementList.filter(\n      elem => elem !== hostElement\n    );\n    this.videoHostOccupiedCallbacks.delete(hostElement);\n    this.videoHostVacatedCallbacks.delete(hostElement);\n    if (this.media.parentNode === hostElement) {\n      this.updateVideoHostElement();\n    }\n  }\n\n  updateVideoHostElement(hostElement) {\n    if (!hostElement) {\n      hostElement = this.videoHostElementList[0] || this.mediaContainer;\n    } else {\n      // move hostElement to front of list\n      this.videoHostElementList = [hostElement].concat(\n        this.videoHostElementList.filter(elem => elem !== hostElement)\n      );\n    }\n    const playing = !this.media.paused;\n    const oldHostElement = this.media.parentNode;\n    if (hostElement === oldHostElement) {\n      return;\n    }\n    hostElement.appendChild(this.media);\n    // according to the HTML spec playback should continue, but\n    // some browsers pause the element whenever it is moved around, so\n    // let's make sure playback resumes if that's the case.\n    if (playing && this.media.paused) {\n      this.media.play();\n    }\n    const onVacated = this.videoHostVacatedCallbacks.get(oldHostElement);\n    if (onVacated) {\n      onVacated(this.media);\n    }\n    const onOccupied = this.videoHostOccupiedCallbacks.get(hostElement);\n    if (onOccupied) {\n      onOccupied(this.media);\n    }\n  }\n\n  handleMediaPlay() {\n    this.setState(\n      state =>\n        state.paused === false && state.awaitingPlayAfterTrackLoad === false\n          ? null\n          : { paused: false, awaitingPlayAfterTrackLoad: false }\n    );\n    this.stealMediaSession();\n  }\n\n  handleMediaPause() {\n    this.setState(state => (state.paused === true ? null : { paused: true }));\n  }\n\n  handleMediaSrcrequest(e) {\n    const { playlist } = this.props;\n    const sources = getTrackSources(playlist, this.state.activeTrackIndex);\n    if (arrayFindIndex(sources, s => s.src === e.srcRequested) !== -1) {\n      // we're good! nothing to update.\n      return;\n    }\n    // looks like 'src' was set from outside our component.\n    // let's see if we can use it.\n    const newTrackIndex = findTrackIndexByUrl(playlist, e.srcRequested);\n    if (newTrackIndex === -1) {\n      logError(\n        `Source '${e.srcRequested}' does not exist in the loaded playlist. ` +\n          `Make sure you've updated the 'playlist' prop to ` +\n          `PlayerContextProvider before you select this track!`\n      );\n      return;\n    }\n    this.selectTrackIndex(newTrackIndex);\n  }\n\n  handleMediaEnded() {\n    if (this.state.seekInProgress) {\n      // nothing to do if we're in the middle of a seek\n      // (this can happen if we're in seekMode: immediate)\n      return;\n    }\n    clearTimeout(this.gapLengthTimeout);\n    const { playlist, loadFirstTrackOnPlaylistComplete } = this.props;\n    if (!isPlaylistValid(playlist)) {\n      return;\n    }\n    const { cycle, activeTrackIndex } = this.state;\n    if (!cycle && activeTrackIndex + 1 >= playlist.length) {\n      if (loadFirstTrackOnPlaylistComplete) {\n        this.goToTrack({\n          index: 0,\n          track: playlist[0],\n          shouldPlay: false,\n          shouldForceLoad: true\n        });\n      }\n      return;\n    }\n    this.gapLengthTimeout = setTimeout(\n      this.forwardSkip,\n      this.props.gapLengthInSeconds * 1000\n    );\n  }\n\n  handleMediaStalled() {\n    this.setState(state => (state.stalled === true ? null : { stalled: true }));\n  }\n\n  handleMediaEmptied() {\n    this.setState(state => (state.paused === true ? null : { paused: true }));\n  }\n\n  handleMediaCanplay() {\n    this.setState(\n      state => (state.trackLoading === false ? null : { trackLoading: false })\n    );\n  }\n\n  handleMediaCanplaythrough() {\n    this.setState(\n      state => (state.stalled === false ? null : { stalled: false })\n    );\n  }\n\n  handleMediaTimeupdate() {\n    const { currentTime, played } = this.media;\n    const { onTimeUpdate, playlist } = this.props;\n    const { activeTrackIndex } = this.state;\n    if (this.state.trackLoading) {\n      // correct currentTime to preset, if applicable, during load\n      this.media.currentTime = this.state.currentTime;\n      return;\n    }\n    this.setState(state => ({\n      currentTime,\n      playedRanges: getTimeRangesArray(played),\n      maxKnownTime: Math.max(state.maxKnownTime, currentTime)\n    }));\n    if (onTimeUpdate) {\n      onTimeUpdate(currentTime, playlist[activeTrackIndex], activeTrackIndex);\n    }\n  }\n\n  handleMediaLoadeddata() {\n    if (this.media.currentTime !== this.state.currentTime) {\n      this.media.currentTime = this.state.currentTime;\n    }\n  }\n\n  handleMediaVolumechange() {\n    const { volume, muted } = this.media;\n    this.setState({ volume, muted });\n  }\n\n  handleMediaDurationchange() {\n    const { duration } = this.media;\n    const activeTrack = this.props.playlist[this.state.activeTrackIndex];\n    if (duration === Infinity) {\n      // This *could* be because we're consuming an unbounded stream.\n      // It could also be because of a weird iOS bug that we want to\n      // try to prevent. See https://github.com/benwiley4000/cassette/issues/355\n\n      // If we still end up with Infinity duration multiple times for\n      // the same track, we'll assume it's correct.\n      if (\n        activeTrack.isUnboundedStream ||\n        activeTrack === this.activeTrackAtLastDurationChange\n      ) {\n        this.setState({\n          duration,\n          currentTime: 0\n        });\n        this.media.currentTime = 0;\n      } else {\n        const { paused } = this.state;\n        this.media.load();\n        if (!paused) {\n          // media.currentSrc is updated asynchronously so we should\n          // play async to avoid weird intermediate state issues\n          setTimeout(() => {\n            this.togglePause(false);\n          });\n        }\n      }\n    } else {\n      this.setState({ duration });\n    }\n    this.activeTrackAtLastDurationChange = activeTrack;\n  }\n\n  handleMediaProgress() {\n    this.setState({\n      bufferedRanges: getTimeRangesArray(this.media.buffered),\n      seekableRanges: getTimeRangesArray(this.media.seekable)\n    });\n  }\n\n  handleMediaLoopchange() {\n    const { loop } = this.media;\n    this.setState(state => (state.loop === loop ? null : { loop }));\n  }\n\n  handleMediaRatechange() {\n    const { playbackRate } = this.media;\n    this.setState(\n      state => (state.playbackRate === playbackRate ? null : { playbackRate })\n    );\n  }\n\n  togglePause(value) {\n    clearTimeout(this.delayTimeout);\n    const pause = typeof value === 'boolean' ? value : !this.state.paused;\n    if (pause) {\n      this.media.pause();\n      return;\n    }\n    if (!this.media.currentSrc) {\n      return;\n    }\n    try {\n      const playPromise = this.media.play();\n      if (playPromise && typeof playPromise.catch === 'function') {\n        playPromise\n          .catch(err => {\n            // AbortError is pretty much always called because we're skipping\n            // tracks quickly or hitting pause before a track has a chance to\n            // play. It's pretty safe to just ignore these error messages.\n            if (err.name !== 'AbortError') {\n              return Promise.reject(err);\n            }\n          })\n          .catch(playErrorHandler);\n      }\n    } catch (err) {\n      playErrorHandler(err);\n    }\n  }\n\n  // assumes playlist is valid - don't call without checking\n  goToTrack(args) {\n    clearTimeout(this.delayTimeout);\n    this.setState(prevState => getGoToTrackState({ prevState, ...args }));\n  }\n\n  selectTrackIndex(index) {\n    const { playlist } = this.props;\n    if (!isPlaylistValid(playlist)) {\n      return;\n    }\n    if (index < 0 || index > playlist.length) {\n      logWarning(`Playlist index ${index} is out of bounds!`);\n      return;\n    }\n    if (this.state.shuffle) {\n      this.shuffler.pickNextItem(index, this.state.activeTrackIndex);\n    }\n    this.goToTrack({ index, track: playlist[index] });\n  }\n\n  backSkip() {\n    const { playlist, stayOnBackSkipThreshold } = this.props;\n    const { media } = this;\n    const { cycle, activeTrackIndex, shuffle } = this.state;\n    if (\n      !isPlaylistValid(playlist) ||\n      media.currentTime >= stayOnBackSkipThreshold ||\n      (!cycle && activeTrackIndex < 1)\n    ) {\n      media.currentTime = 0;\n      return;\n    }\n    let index;\n    if (shuffle) {\n      const previousItem = this.shuffler.findPreviousItem(activeTrackIndex);\n      if (previousItem === undefined) {\n        // if we aren't allowing backShuffle then we'll hit a stopping point.\n        media.currentTime = 0;\n        return;\n      }\n      index = findTrackIndexByUrl(playlist, previousItem);\n    } else {\n      index = activeTrackIndex - 1;\n      if (index < 0) {\n        index = playlist.length - 1;\n      }\n    }\n    this.goToTrack({ index, track: playlist[index], shouldForceLoad: true });\n  }\n\n  forwardSkip() {\n    const { playlist } = this.props;\n    const { cycle, activeTrackIndex, shuffle } = this.state;\n    if (\n      !isPlaylistValid(playlist) ||\n      (!cycle && activeTrackIndex + 1 >= playlist.length)\n    ) {\n      return;\n    }\n    let index;\n    if (shuffle) {\n      index = findTrackIndexByUrl(\n        playlist,\n        this.shuffler.findNextItem(activeTrackIndex)\n      );\n    } else {\n      index = activeTrackIndex + 1;\n      if (index >= playlist.length) {\n        index = 0;\n      }\n    }\n    this.goToTrack({ index, track: playlist[index], shouldForceLoad: true });\n  }\n\n  seekPreview(targetTime) {\n    if (!isPlaylistValid(this.props.playlist)) {\n      return;\n    }\n    const baseStateUpdate = {\n      seekPreviewTime: targetTime,\n      seekInProgress: true\n    };\n    switch (this.props.seekMode) {\n      case 'paused':\n        this.setState(({ paused, awaitingResumeOnSeekComplete }) => ({\n          ...baseStateUpdate,\n          awaitingResumeOnSeekComplete: paused\n            ? awaitingResumeOnSeekComplete\n            : true\n        }));\n        this.media.currentTime = targetTime;\n        if (!this.state.paused) {\n          this.togglePause(true);\n        }\n        break;\n      case 'immediate':\n        this.setState(({ paused, awaitingResumeOnSeekComplete }) => ({\n          ...baseStateUpdate,\n          awaitingResumeOnSeekComplete: paused\n            ? awaitingResumeOnSeekComplete\n            : true\n        }));\n        this.media.currentTime = targetTime;\n        if (this.state.awaitingResumeOnSeekComplete && !this.media.ended) {\n          // if we earlier encountered an 'ended' state,\n          // un-pausing becomes necessary to resume playback\n          this.togglePause(false);\n        }\n        break;\n      case 'onrelease':\n        this.setState(baseStateUpdate);\n        break;\n    }\n  }\n\n  seekComplete(targetTime) {\n    const { seekPreviewTime, awaitingResumeOnSeekComplete } = this.state;\n    const baseStateUpdate = {\n      seekInProgress: false,\n      awaitingResumeOnSeekComplete: false\n    };\n    const currentTime =\n      typeof targetTime === 'number' ? targetTime : seekPreviewTime;\n\n    if (isNaN(currentTime)) {\n      this.setState(baseStateUpdate);\n      return;\n    }\n    this.setState({\n      ...baseStateUpdate,\n      /* we'll update currentTime on the media listener hook anyway,\n       * but that might not happen for a bit... so the optimistic update\n       * helps us avoid the progress bar jumping around and confusing the user.\n       * https://github.com/benwiley4000/cassette/issues/209\n       */\n      currentTime\n    });\n    this.media.currentTime = currentTime;\n    if (awaitingResumeOnSeekComplete) {\n      if (this.media.ended) {\n        this.forwardSkip();\n      } else {\n        this.togglePause(false);\n      }\n    }\n  }\n\n  setVolume(volume, inProgress = true) {\n    if (inProgress && !this.state.setVolumeInProgress) {\n      this.setState({\n        setVolumeInProgress: true\n      });\n    }\n    const volumeInBounds = convertToNumberWithinIntervalBounds(volume, 0, 1);\n    this.media.muted = volumeInBounds === 0 ? true : false;\n    this.media.volume = volumeInBounds;\n  }\n\n  setVolumeComplete(volume) {\n    if (typeof volume === 'number') {\n      this.setVolume(volume, false);\n    }\n    this.setState({\n      setVolumeInProgress: false\n    });\n    if (!this.media.muted) {\n      this.lastStableVolume = this.media.volume;\n    }\n  }\n\n  toggleMuted(value) {\n    const muted = typeof value === 'boolean' ? value : !this.state.muted;\n    this.media.muted = muted;\n    if (!muted) {\n      this.media.volume = this.lastStableVolume;\n    }\n  }\n\n  toggleShuffle(value) {\n    const shuffle = typeof value === 'boolean' ? value : !this.state.shuffle;\n    this.setState({ shuffle });\n  }\n\n  setRepeatStrategy(repeatStrategy) {\n    if (repeatStrategyOptions.indexOf(repeatStrategy) === -1) {\n      logWarning(\n        'repeatStrategy \"' +\n          repeatStrategy +\n          '\" is not one of: ' +\n          repeatStrategyOptions.split(', ') +\n          '.'\n      );\n      return;\n    }\n    switch (repeatStrategy) {\n      case 'track':\n        // state update is automatic\n        this.media.loop = true;\n        break;\n      case 'playlist':\n        this.setState({\n          loop: false,\n          cycle: true\n        });\n        this.media.loop = false;\n        break;\n      case 'none':\n        this.setState({\n          loop: false,\n          cycle: false\n        });\n        this.media.loop = false;\n        break;\n    }\n  }\n\n  setPlaybackRate(rate) {\n    this.media.playbackRate = rate;\n  }\n\n  getControlProps() {\n    const { props, state } = this;\n    const playerContext = {\n      playlist: props.playlist,\n      activeTrackIndex: state.activeTrackIndex,\n      trackLoading: state.trackLoading,\n      paused: state.paused,\n      currentTime: state.currentTime,\n      seekPreviewTime: state.seekPreviewTime,\n      seekInProgress: state.seekInProgress,\n      awaitingPlayResume:\n        state.awaitingResumeOnSeekComplete || state.awaitingPlayAfterTrackLoad,\n      duration:\n        state.duration === Infinity ? state.maxKnownTime : state.duration,\n      bufferedRanges: state.bufferedRanges,\n      playedRanges: state.playedRanges,\n      seekableRanges: state.seekableRanges,\n      volume: state.volume,\n      muted: state.muted,\n      shuffle: state.shuffle,\n      stalled: state.stalled,\n      playbackRate: state.playbackRate,\n      mediaCannotPlay: state.mediaCannotPlay,\n      setVolumeInProgress: state.setVolumeInProgress,\n      repeatStrategy: getRepeatStrategy(state.loop, state.cycle),\n      registerVideoHostElement: this.registerVideoHostElement,\n      renderVideoIntoHostElement: this.renderVideoIntoHostElement,\n      unregisterVideoHostElement: this.unregisterVideoHostElement,\n      onTogglePause: this.togglePause,\n      onSelectTrackIndex: this.selectTrackIndex,\n      onBackSkip: this.backSkip,\n      onForwardSkip: this.forwardSkip,\n      onSeekPreview: this.seekPreview,\n      onSeekComplete: this.seekComplete,\n      onSetVolume: this.setVolume,\n      onSetVolumeComplete: this.setVolumeComplete,\n      onToggleMuted: this.toggleMuted,\n      onToggleShuffle: this.toggleShuffle,\n      onSetRepeatStrategy: this.setRepeatStrategy,\n      onSetPlaybackRate: this.setPlaybackRate\n    };\n    if (this.playerContext) {\n      // only update this.playerContext if something has changed\n      for (const key of Object.keys(this.playerContext)) {\n        if (playerContext[key] !== this.playerContext[key]) {\n          this.playerContext = playerContext;\n          break;\n        }\n      }\n    } else {\n      // first time - nothing to compare\n      this.playerContext = playerContext;\n    }\n    return this.playerContext;\n  }\n\n  render() {\n    const playerContext = this.getControlProps();\n    return (\n      <Fragment>\n        <div ref={elem => (this.mediaContainer = elem)} hidden />\n        <PlayerContext.Provider value={playerContext}>\n          {typeof this.props.children === 'function'\n            ? this.props.children(playerContext)\n            : this.props.children}\n        </PlayerContext.Provider>\n      </Fragment>\n    );\n  }\n}\n\nPlayerContextProvider.propTypes = {\n  playlist: PropTypes.arrayOf(PlayerPropTypes.track.isRequired).isRequired,\n  autoplay: PropTypes.bool.isRequired,\n  createMediaElement: PropTypes.func.isRequired,\n  autoplayDelayInSeconds: PropTypes.number.isRequired,\n  gapLengthInSeconds: PropTypes.number.isRequired,\n  crossOrigin: PlayerPropTypes.crossOriginAttribute,\n  defaultVolume: PropTypes.number.isRequired,\n  defaultMuted: PropTypes.bool,\n  defaultRepeatStrategy: PlayerPropTypes.repeatStrategy.isRequired,\n  defaultShuffle: PropTypes.bool,\n  defaultPlaybackRate: PropTypes.number.isRequired,\n  startingTrackIndex: PropTypes.number.isRequired,\n  loadFirstTrackOnPlaylistComplete: PropTypes.bool,\n  seekMode: PlayerPropTypes.seekMode.isRequired,\n  maintainPlaybackRate: PropTypes.bool.isRequired,\n  allowBackShuffle: PropTypes.bool,\n  stayOnBackSkipThreshold: PropTypes.number.isRequired,\n  supportedMediaSessionActions: PropTypes.arrayOf(\n    PlayerPropTypes.mediaSessionAction.isRequired\n  ).isRequired,\n  mediaSessionSeekLengthInSeconds: PropTypes.number.isRequired,\n  mediaElementRef: PropTypes.func,\n  initialStateSnapshot: PropTypes.object,\n  onStateSnapshot: PropTypes.func,\n  onActiveTrackUpdate: PropTypes.func,\n  // A function called when the media element's currentTime attribute has changed\n  onTimeUpdate: PropTypes.func,\n  onTrackPlaybackFailure: PropTypes.func,\n  getPosterImageForTrack: PropTypes.func.isRequired,\n  getMediaTitleAttributeForTrack: PropTypes.func.isRequired,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired\n};\n\nPlayerContextProvider.defaultProps = {\n  autoplay: false,\n  autoplayDelayInSeconds: 0,\n  createMediaElement: () => document.createElement('video'),\n  gapLengthInSeconds: 0,\n  defaultVolume: 1,\n  defaultMuted: false,\n  defaultRepeatStrategy: 'playlist',\n  defaultShuffle: false,\n  defaultPlaybackRate: 1,\n  startingTrackIndex: 0,\n  loadFirstTrackOnPlaylistComplete: true,\n  seekMode: 'immediate',\n  maintainPlaybackRate: false,\n  allowBackShuffle: false,\n  stayOnBackSkipThreshold: 5,\n  supportedMediaSessionActions: ['play', 'pause', 'previoustrack', 'nexttrack'],\n  mediaSessionSeekLengthInSeconds: 10,\n  getPosterImageForTrack(track) {\n    return track && track.artwork ? track.artwork[0].src : '';\n  },\n  getMediaTitleAttributeForTrack: getDisplayText\n};\n\nexport class PlayerContextGroupMember extends Component {\n  componentDidMount() {\n    this.props.groupContext.registerMediaElement(this.mediaElement);\n  }\n\n  componentWillUnmount() {\n    // Media element might not exist\n    // (see componentWillUnmount of PlayerContextProvider)\n    if (this.mediaElement) {\n      this.props.groupContext.unregisterMediaElement(this.mediaElement);\n    }\n  }\n\n  render() {\n    const { groupContext, props } = this.props;\n    const { mediaElementRef, ...rest } = props;\n    return (\n      <PlayerContextProvider\n        {...groupContext.groupProps}\n        {...rest}\n        mediaElementRef={ref => {\n          if (mediaElementRef) {\n            mediaElementRef(ref);\n          }\n          this.mediaElement = ref;\n        }}\n      />\n    );\n  }\n}\n\nPlayerContextGroupMember.propTypes = {\n  groupContext: PropTypes.shape({\n    groupProps: PropTypes.object.isRequired,\n    registerMediaElement: PropTypes.func.isRequired,\n    unregisterMediaElement: PropTypes.func.isRequired\n  }).isRequired\n};\n\nfunction PlayerContextGroupConsumer(props) {\n  return (\n    <GroupContext.Consumer>\n      {groupContext => {\n        if (!groupContext) {\n          return createElement(PlayerContextProvider, props);\n        }\n        return createElement(PlayerContextGroupMember, {\n          groupContext,\n          props\n        });\n      }}\n    </GroupContext.Consumer>\n  );\n}\n\nexport default PlayerContextGroupConsumer;\n","// TODO: support Preact, Inferno, etc.\nfunction getReactParentNameStack(componentInstance) {\n  const fiber = componentInstance._reactInternalFiber;\n  const parentStack = [];\n  let owner = fiber;\n  while ((owner = owner._debugOwner)) {\n    if (owner.type.name) {\n      parentStack.push(owner.type.name);\n    }\n  }\n  return parentStack;\n}\n\nexport default getReactParentNameStack;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport PlayerContext from './PlayerContext';\n\nimport { logWarning } from './utils/console';\nimport getReactParentNameStack from './utils/getReactParentNameStack';\n\nclass PlayerContextConsumer extends PureComponent {\n  render() {\n    const { children, filterList } = this.props;\n    if (!filterList) {\n      if (!this.warnedAboutFilterList) {\n        let warning = `\n          Please pass the filterList prop to PlayerContextConsumer in order\n          to avoid unnecessarily frequent re-renders, e.g.\n\n          const filterList = ['paused', 'onTogglePause'];\n          // ...\n          <PlayerContextConsumer filterList={filterList}>\n            {({ paused, onTogglePause }) => {\n              return <div>{/* ... */}</div>;\n            }}\n          </PlayerContextConsumer>\n        `;\n        for (const parentName of getReactParentNameStack(this)) {\n          warning += `\n            Rendered by ${parentName}`;\n        }\n        logWarning(warning);\n        this.warnedAboutFilterList = true;\n      }\n      return <PlayerContext.Consumer>{children}</PlayerContext.Consumer>;\n    }\n\n    const flags = PlayerContext.__cassetteGetObservedBits(filterList);\n    return (\n      <PlayerContext.Consumer unstable_observedBits={flags}>\n        {playerContext => {\n          const usedContext = {};\n          for (const name of filterList) {\n            if (playerContext.hasOwnProperty(name)) {\n              usedContext[name] = playerContext[name];\n            }\n          }\n          return children(usedContext);\n        }}\n      </PlayerContext.Consumer>\n    );\n  }\n}\n\nPlayerContextConsumer.propTypes = {\n  children: PropTypes.func.isRequired,\n  filterList: PropTypes.arrayOf(PropTypes.string.isRequired)\n};\n\nexport default PlayerContextConsumer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport GroupContext from './GroupContext';\n\n/**\n * A wrapper which can be used to share configuration among multiple descendant [`PlayerContextProvider`](#playercontextprovider) instances as well as prevent multiple media elements from playing audio simultaneously\n */\nexport class PlayerContextGroup extends Component {\n  constructor(props) {\n    super(props);\n    this.registerMediaElement = this.registerMediaElement.bind(this);\n    this.unregisterMediaElement = this.unregisterMediaElement.bind(this);\n    this.enforceOneMediaSourceOnly = this.enforceOneMediaSourceOnly.bind(this);\n    this.mediaElements = [];\n  }\n\n  registerMediaElement(elem) {\n    this.mediaElements = this.mediaElements.concat(elem);\n    elem.addEventListener('play', this.enforceOneMediaSourceOnly, true);\n    elem.addEventListener('volumechange', this.enforceOneMediaSourceOnly, true);\n  }\n\n  unregisterMediaElement(elem) {\n    this.mediaElements = this.mediaElements.filter(element => elem !== element);\n    elem.removeEventListener('play', this.enforceOneMediaSourceOnly, true);\n    elem.removeEventListener(\n      'volumechange',\n      this.enforceOneMediaSourceOnly,\n      true\n    );\n  }\n\n  enforceOneMediaSourceOnly(e) {\n    const mediaElement = e.target;\n    const { paused, muted } = mediaElement;\n    if (paused || muted) {\n      return;\n    }\n    for (const element of this.mediaElements) {\n      if (element !== mediaElement && !element.muted) {\n        element.pause();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <GroupContext.Consumer>\n        {groupContext => {\n          const value = groupContext\n            ? {\n                ...groupContext,\n                groupProps: { ...groupContext.groupProps, ...this.props }\n              }\n            : {\n                groupProps: this.props,\n                registerMediaElement: this.registerMediaElement,\n                unregisterMediaElement: this.unregisterMediaElement\n              };\n          return (\n            <GroupContext.Provider value={value}>\n              {this.props.children}\n            </GroupContext.Provider>\n          );\n        }}\n      </GroupContext.Consumer>\n    );\n  }\n}\n\nPlayerContextGroup.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default PlayerContextGroup;\n","import createSingleGlobalContext from './utils/createSingleGlobalContext';\nimport { logWarning } from './utils/console';\n\nexport default createSingleGlobalContext({\n  displayName: 'FullscreenContext',\n  defaultValue: {\n    fullscreen: false,\n    requestFullscreen() {\n      logWarning(\n        'Fullscreen request ignored since there is no ' +\n          'FullscreenContextProvider ancestor.'\n      );\n    },\n    requestExitFullscreen() {\n      logWarning(\n        'Exit fullscreen request ignored since there is no ' +\n          'FullscreenContextProvider ancestor.'\n      );\n    }\n  },\n  keysWillUpdate: ['fullscreen']\n});\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport FullscreenContext from './FullscreenContext';\n\nconst fullscreenStyle = {\n  width: '100%',\n  height: '100%'\n};\n\n/**\n * Wraps an area which should be fullscreen-able\n */\nexport class FullscreenContextProvider extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fullscreen: false\n    };\n    this.requestFullscreen = this.requestFullscreen.bind(this);\n    this.requestExitFullscreen = this.requestExitFullscreen.bind(this);\n    this.handleFullscreenChange = this.handleFullscreenChange.bind(this);\n    this.fullscreenElement = null;\n  }\n\n  componentDidMount() {\n    document.addEventListener('fullscreenchange', this.handleFullscreenChange);\n    document.addEventListener(\n      'webkitfullscreenchange',\n      this.handleFullscreenChange\n    );\n    document.addEventListener(\n      'mozfullscreenchange',\n      this.handleFullscreenChange\n    );\n    document.addEventListener(\n      'msfullscreenchange',\n      this.handleFullscreenChange\n    );\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\n      'fullscreenchange',\n      this.handleFullscreenChange\n    );\n    document.removeEventListener(\n      'webkitfullscreenchange',\n      this.handleFullscreenChange\n    );\n    document.removeEventListener(\n      'mozfullscreenchange',\n      this.handleFullscreenChange\n    );\n    document.removeEventListener(\n      'msfullscreenchange',\n      this.handleFullscreenChange\n    );\n  }\n\n  requestFullscreen() {\n    if (!this.props.fullscreenEnabled) {\n      return;\n    }\n    if (this.fullscreenElement.requestFullscreen) {\n      this.fullscreenElement.requestFullscreen();\n    } else if (this.fullscreenElement.webkitRequestFullscreen) {\n      this.fullscreenElement.webkitRequestFullscreen();\n    } else if (this.fullscreenElement.mozRequestFullscreen) {\n      this.fullscreenElement.mozRequestFullScreen();\n    } else if (this.fullscreenElement.msRequestFullscreen) {\n      this.fullscreenElement.msRequestFullscreen();\n    }\n  }\n\n  requestExitFullscreen() {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.msExitFullscreen) {\n      document.mozExitFullscreen();\n    }\n  }\n\n  handleFullscreenChange() {\n    const documentFullscreenElement =\n      document.fullscreenElement ||\n      document.webkitFullscreenElement ||\n      document.mozFullScreenElement ||\n      document.msFullscreenElement;\n    this.setState({\n      fullscreen: documentFullscreenElement === this.fullscreenElement\n    });\n  }\n\n  getFullscreenContext() {\n    const fullscreenContext = {\n      fullscreen: this.state.fullscreen,\n      requestFullscreen: this.requestFullscreen,\n      requestExitFullscreen: this.requestExitFullscreen\n    };\n    if (\n      this.fullscreenContext &&\n      fullscreenContext.fullscreen === this.fullscreenContext.fullscreen\n    ) {\n      // no change\n      return this.fullscreenContext;\n    }\n    return (this.fullscreenContext = fullscreenContext);\n  }\n\n  render() {\n    const fullscreenContext = this.getFullscreenContext();\n    return (\n      <div\n        ref={elem => (this.fullscreenElement = elem)}\n        style={this.state.fullscreen ? fullscreenStyle : undefined}\n      >\n        <FullscreenContext.Provider value={fullscreenContext}>\n          {typeof this.props.children === 'function'\n            ? this.props.children(fullscreenContext)\n            : this.props.children}\n        </FullscreenContext.Provider>\n      </div>\n    );\n  }\n}\n\nFullscreenContextProvider.propTypes = {\n  fullscreenEnabled: PropTypes.bool.isRequired,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired\n};\n\nFullscreenContextProvider.defaultProps = {\n  fullscreenEnabled: true\n};\n\nexport default FullscreenContextProvider;\n","import React, { createElement } from 'react';\n\nimport PlayerContext from './PlayerContext';\nimport FullscreenContext from './FullscreenContext';\nimport { logWarning } from './utils/console';\n\nfunction playerContextFilter(component, contextPropNames) {\n  const warned = {};\n  const childName = component.displayName || component.name;\n  const flags = PlayerContext.__cassetteGetObservedBits(contextPropNames);\n  function PlayerContextFilter(props) {\n    return (\n      <FullscreenContext.Consumer>\n        {fullscreenContext => (\n          <PlayerContext.Consumer unstable_observedBits={flags}>\n            {playerContext => {\n              const childProps = { ...props };\n              for (const propName of contextPropNames) {\n                if (playerContext.hasOwnProperty(propName)) {\n                  childProps[propName] = playerContext[propName];\n                } else if (fullscreenContext.hasOwnProperty(propName)) {\n                  childProps[propName] = fullscreenContext[propName];\n                } else if (!warned[propName]) {\n                  logWarning(\n                    \"Prop '\" +\n                      propName +\n                      \"' for component \" +\n                      childName +\n                      ' not found in playerContext or fullscreenContext.'\n                  );\n                  warned[propName] = true;\n                }\n              }\n              return createElement(component, childProps);\n            }}\n          </PlayerContext.Consumer>\n        )}\n      </FullscreenContext.Consumer>\n    );\n  }\n  if (childName) {\n    PlayerContextFilter.displayName = `PlayerContextFilter(${childName})`;\n  }\n  return PlayerContextFilter;\n}\n\nexport default playerContextFilter;\n","import PlayerContextProvider from './PlayerContextProvider';\nimport PlayerContext from './PlayerContext';\nimport PlayerContextConsumer from './PlayerContextConsumer';\nimport PlayerContextGroup from './PlayerContextGroup';\nimport FullscreenContextProvider from './FullscreenContextProvider';\nimport FullscreenContext from './FullscreenContext';\nimport playerContextFilter from './playerContextFilter';\nimport * as PlayerPropTypes from './PlayerPropTypes';\n\nexport { PlayerContextProvider };\nexport { PlayerContextConsumer };\nexport { PlayerContextGroup };\nexport { FullscreenContextProvider };\nexport const FullscreenContextConsumer = FullscreenContext.Consumer;\nexport { playerContextFilter };\nexport { PlayerPropTypes };\n\n// undocumented exports\nexport * from './utils/console';\nexport {\n  default as convertToNumberWithinIntervalBounds\n} from './utils/convertToNumberWithinIntervalBounds';\nexport { default as isPlaylistValid } from './utils/isPlaylistValid';\nexport { default as getDisplayText } from './utils/getDisplayText';\nexport { repeatStrategyOptions } from './constants';\nexport const donotuse_PlayerContext = PlayerContext;\nexport const donotuse_FullscreenContext = FullscreenContext;\n"],"sourceRoot":""}