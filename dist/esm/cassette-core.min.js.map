{"version":3,"sources":["webpack://cassetteCore/webpack/universalModuleDefinition","webpack://cassetteCore/webpack/bootstrap","webpack://cassetteCore/external {\"root\":\"React\",\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\"}","webpack://cassetteCore/external {\"root\":\"PropTypes\",\"commonjs\":\"prop-types\",\"commonjs2\":\"prop-types\",\"amd\":\"prop-types\"}","webpack://cassetteCore/./packages/core/src/utils/console.js","webpack://cassetteCore/./packages/core/src/utils/createSingleGlobalContext.js","webpack://cassetteCore/./packages/core/node_modules/array-find-index/index.js","webpack://cassetteCore/(webpack)/buildin/global.js","webpack://cassetteCore/./packages/core/src/PlayerContext.js","webpack://cassetteCore/./packages/core/src/GroupContext.js","webpack://cassetteCore/./packages/core/src/constants.js","webpack://cassetteCore/./packages/core/src/PlayerPropTypes.js","webpack://cassetteCore/./packages/core/src/factories/createCustomMediaElement.js","webpack://cassetteCore/./packages/core/src/utils/ShuffleManager.js","webpack://cassetteCore/./packages/core/src/utils/isPlaylistValid.js","webpack://cassetteCore/./packages/core/src/utils/getTrackSources.js","webpack://cassetteCore/./packages/core/src/utils/findTrackIndexByUrl.js","webpack://cassetteCore/./packages/core/src/utils/snapshot.js","webpack://cassetteCore/./packages/core/src/utils/getSourceList.js","webpack://cassetteCore/./packages/core/src/utils/getTimeRangesArray.js","webpack://cassetteCore/./packages/core/src/utils/getRepeatStrategy.js","webpack://cassetteCore/./packages/core/src/utils/convertToNumberWithinIntervalBounds.js","webpack://cassetteCore/./packages/core/src/utils/getDisplayText.js","webpack://cassetteCore/./packages/core/src/utils/parseTimeString.js","webpack://cassetteCore/./packages/core/src/utils/getInitialDuration.js","webpack://cassetteCore/./packages/core/src/PlayerContextProvider.js","webpack://cassetteCore/./packages/core/src/utils/getReactParentNameStack.js","webpack://cassetteCore/./packages/core/src/PlayerContextConsumer.js","webpack://cassetteCore/./packages/core/src/PlayerContextGroup.js","webpack://cassetteCore/./packages/core/src/FullscreenContext.js","webpack://cassetteCore/./packages/core/src/FullscreenContextProvider.js","webpack://cassetteCore/./packages/core/src/playerContextFilter.js","webpack://cassetteCore/./packages/core/src/index.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","logWarning","log","console","logError","error","warn","packageVersion","version","_global","window","global","__cassette_contexts__","_ref","displayName","_ref$defaultValue","defaultValue","keysWillUpdate","ExistingContext","_console__WEBPACK_IMPORTED_MODULE_1__","flags","Context","react__WEBPACK_IMPORTED_MODULE_0__","prev","next","mask","__cassetteGetObservedBits","keys","observedBits","arr","predicate","ctx","Array","findIndex","TypeError","list","len","length","g","Function","eval","e","PlayerContext","createSingleGlobalContext","GroupContext","repeatStrategyOptions","requiredOnlyUnlessHasProp","propType","altPropName","warnedAboutDefiningBoth","props","propName","componentName","_len","arguments","rest","_key","isRequired","Error","controlKeyword","external_root_PropTypes_commonjs_prop_types_commonjs2_prop_types_amd_prop_types_default","a","oneOf","control","oneOfType","func","crossOriginAttribute","PlayerPropTypes_repeatStrategy","mediaSource","shape","src","string","type","mediaSessionAction","mediaSessionArtwork","sizes","PlayerPropTypes_track","url","sources","arrayOf","title","artist","album","artwork","duration","number","startingTime","isUnboundedStream","bool","meta","seekMode","loopchange","srcrequest","factories_createCustomMediaElement","media","MutationObserver","dispatchEvent","Event","observe","attributes","attributeFilter","currentSrc","set","srcRequested","_goForward","forwardStack","backStack","currentItem","item","push","pop","_findNextItem","allowMore","nextItem","indexOf","_allItemsMatch","Math","floor","random","undefined","utils_ShuffleManager","constructor","options","_list","_forwardStack","_backStack","_currentItem","_allowBackShuffle","Boolean","allowBackShuffle","findNextItem","currentIndex","setCurrentIndex","findPreviousItem","pickNextItem","index","setList","setOptions","clear","utils_isPlaylistValid","playlist","blankSources","utils_getTrackSources","_playlist$index","utils_findTrackIndexByUrl","array_find_index_default","track","source","veryLongKey","versionKey","migrations","oldSnapshot","__unstable__","_objectSpread","_objectWithoutPropertiesLoose","[object Object]","utils_getSourceList","map","_","utils_getTimeRangesArray","timeRangesObj","timeRangesArray","start","end","utils_getRepeatStrategy","loop","cycle","utils_convertToNumberWithinIntervalBounds","min","max","Infinity","utils_getDisplayText","utils_parseTimeString","str","seconds","factor","times","split","slice","parseInt","utils_getInitialDuration","playErrorHandler","err","warningMessage","Date","toLocaleTimeString","supportableMediaSessionActions","defaultState","paused","currentTime","seekPreviewTime","seekInProgress","awaitingResumeOnSeekComplete","awaitingPlayAfterTrackLoad","bufferedRanges","playedRanges","seekableRanges","stalled","shouldRequestPlayOnNextUpdate","mediaCannotPlay","maxKnownTime","getGoToTrackState","prevState","_ref$shouldPlay","shouldPlay","_ref$shouldForceLoad","shouldForceLoad","isNewTrack","activeTrackIndex","shouldLoadAsNew","trackLoading","awaitingForceLoad","PlayerContextProvider_PlayerContextProvider","external_root_React_commonjs_react_commonjs2_react_amd_react_","super","startingTrackIndex","playlistIsValid","initialStateSnapshot","restoredStateFromSnapshot","_restoredStateFromSna","snapshot","_migratedSnapshot$ver","reduce","migration","volume","muted","shuffle","playbackRate","activeTrackSrc","restoredStateValues","awaitingPlay","useCurrentTime","newTrackIndex","restoreStateFromSnapshot","JSON","stringify","state","PlayerContextProvider_objectSpread","defaultVolume","defaultMuted","defaultRepeatStrategy","defaultShuffle","defaultPlaybackRate","setVolumeInProgress","autoplay","__playlist__","lastStableVolume","shuffler","videoHostElementList","videoHostOccupiedCallbacks","Map","videoHostVacatedCallbacks","handleTrackPlaybackFailure","togglePause","selectTrackIndex","forwardSkip","backSkip","seekPreview","seekComplete","setVolume","setVolumeComplete","toggleMuted","toggleShuffle","setRepeatStrategy","setPlaybackRate","registerVideoHostElement","renderVideoIntoHostElement","unregisterVideoHostElement","updateVideoHostElement","handleMediaPlay","handleMediaPause","handleMediaSrcrequest","handleMediaEnded","handleMediaEmptied","handleMediaStalled","handleMediaCanplaythrough","handleMediaCanplay","handleMediaTimeupdate","handleMediaLoadeddata","handleMediaVolumechange","handleMediaDurationchange","handleMediaProgress","handleMediaLoopchange","handleMediaRatechange","componentDidMount","createMediaElement","_this$props","crossOrigin","autoplayDelayInSeconds","mediaElementRef","getPosterImageForTrack","getMediaTitleAttributeForTrack","onActiveTrackUpdate","_this$state","setAttribute","addEventListener","setMediaElementSources","mediaContainer","appendChild","setState","delayTimeout","setTimeout","trackIndex","previousTrack","previousTrackIndex","nextProps","newPlaylist","baseNewState","prevSources","currentSources","componentDidUpdate","prevProps","newSources","prevTrack","newTrack","stealMediaSession","clearTimeout","snapshotUpdateTimeout","onStateSnapshot","getStateSnapshot","componentWillUnmount","removeEventListener","sourceElements","querySelectorAll","sourceElement","gapLengthTimeout","MediaSession","navigator","mediaSession","metadata","MediaMetadata","action","supportedMediaSessionActions","seekLength","mediaSessionSeekLengthInSeconds","forEach","handler","setActionHandler","firstChild","removeChild","document","createElement","load","event","onTrackPlaybackFailure","hostElement","_ref2","onHostOccupied","onHostVacated","concat","cancelAnimationFrame","videoHostUpdateRaf","requestAnimationFrame","filter","elem","delete","parentNode","playing","oldHostElement","play","onVacated","onOccupied","_this$props2","loadFirstTrackOnPlaylistComplete","_this$state2","goToTrack","gapLengthInSeconds","_this$media","played","_this$props3","onTimeUpdate","_this$state3","_this$media2","activeTrack","activeTrackAtLastDurationChange","buffered","seekable","pause","playPromise","catch","Promise","reject","args","_this$props4","stayOnBackSkipThreshold","_this$state4","previousItem","_this$state5","targetTime","baseStateUpdate","_ref3","_ref4","ended","_this$state6","isNaN","inProgress","volumeInBounds","repeatStrategy","rate","getControlProps","playerContext","awaitingPlayResume","onTogglePause","onSelectTrackIndex","onBackSkip","onForwardSkip","onSeekPreview","onSeekComplete","onSetVolume","onSetVolumeComplete","onToggleMuted","onToggleShuffle","onSetRepeatStrategy","onSetPlaybackRate","render","external_root_React_commonjs_react_commonjs2_react_amd_react_default","ref","hidden","Provider","children","defaultProps","maintainPlaybackRate","PlayerContextProvider_PlayerContextGroupMember","groupContext","registerMediaElement","mediaElement","unregisterMediaElement","_this$props5","PlayerContextProvider_objectWithoutPropertiesLoose","_extends","groupProps","src_PlayerContextProvider","Consumer","utils_getReactParentNameStack","componentInstance","parentStack","owner","_reactInternalFiber","_debugOwner","src_PlayerContextConsumer","filterList","warnedAboutFilterList","warning","parentName","unstable_observedBits","usedContext","src_PlayerContextGroup","enforceOneMediaSourceOnly","mediaElements","element","target","PlayerContextGroup_objectSpread","FullscreenContext","fullscreen","requestFullscreen","requestExitFullscreen","fullscreenStyle","width","height","FullscreenContextProvider_FullscreenContextProvider","handleFullscreenChange","fullscreenElement","fullscreenEnabled","webkitRequestFullscreen","mozRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","exitFullscreen","webkitExitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","mozExitFullscreen","documentFullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","getFullscreenContext","fullscreenContext","style","src_FullscreenContextProvider","src_playerContextFilter","component","contextPropNames","warned","childName","PlayerContextFilter","childProps","playerContextFilter_objectSpread","FullscreenContextConsumer","donotuse_PlayerContext","donotuse_FullscreenContext"],"mappings":"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","file":"esm/cassette-core.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"prop-types\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"prop-types\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cassetteCore\"] = factory(require(\"react\"), require(\"prop-types\"));\n\telse\n\t\troot[\"cassetteCore\"] = factory(root[\"React\"], root[\"PropTypes\"]);\n})((typeof self !== \"undefined\" ? self : this), function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","/* eslint-disable no-console */\n\nconst log = console.log.bind(console);\n\nexport const logError = console.error ? console.error.bind(console) : log;\nexport const logWarning = console.warn ? console.warn.bind(console) : log;\n","import { createContext } from 'react';\n\nimport { logWarning } from './console';\n\nconst packageVersion = require('../../package.json').version;\n\nconst _global = typeof window === 'undefined' ? global : window;\n_global.__cassette_contexts__ = _global.__cassette_contexts__ || {};\n\nfunction createSingleGlobalContext({\n  displayName,\n  defaultValue = null,\n  keysWillUpdate\n}) {\n  const ExistingContext = _global.__cassette_contexts__[displayName];\n  if (ExistingContext) {\n    if (ExistingContext.packageVersion !== packageVersion) {\n      logWarning(\n        `Warning: multiple versions of ${displayName} from the @cassette/core` +\n          ` package have been loaded. v${packageVersion} will be ignored and` +\n          ` v${ExistingContext.packageVersion} will be used instead.`\n      );\n    }\n    return ExistingContext;\n  }\n  // inspired by:\n  // https://github.com/philosaf/observed-bits/blob/master/src/index.js\n  const flags = {};\n  let i = 0;\n  for (const key of keysWillUpdate) {\n    flags[key] = 1 << i++;\n  }\n  const Context = createContext(defaultValue, function getChangedBits(\n    prev,\n    next\n  ) {\n    let mask = 0;\n    for (const key of keysWillUpdate) {\n      if (prev[key] !== next[key]) {\n        mask |= flags[key];\n      }\n    }\n    return mask;\n  });\n  Context.__cassetteGetObservedBits = keys => {\n    let observedBits = 0;\n    for (const key of keys) {\n      observedBits |= flags[key];\n    }\n    return observedBits;\n  };\n  Context.displayName = displayName;\n  Context.packageVersion = packageVersion;\n  _global.__cassette_contexts__[displayName] = Context;\n  return Context;\n}\n\nexport default createSingleGlobalContext;\n","'use strict';\nmodule.exports = function (arr, predicate, ctx) {\n\tif (typeof Array.prototype.findIndex === 'function') {\n\t\treturn arr.findIndex(predicate, ctx);\n\t}\n\n\tif (typeof predicate !== 'function') {\n\t\tthrow new TypeError('predicate must be a function');\n\t}\n\n\tvar list = Object(arr);\n\tvar len = list.length;\n\n\tif (len === 0) {\n\t\treturn -1;\n\t}\n\n\tfor (var i = 0; i < len; i++) {\n\t\tif (predicate.call(ctx, list[i], i, list)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import createSingleGlobalContext from './utils/createSingleGlobalContext';\n\n// TODO: test to make sure context contents stay in sync with\n// enumerated list here\n\nexport default createSingleGlobalContext({\n  displayName: 'PlayerContext',\n  keysWillUpdate: [\n    'playlist',\n    'activeTrackIndex',\n    'trackLoading',\n    'paused',\n    'currentTime',\n    'seekPreviewTime',\n    'seekInProgress',\n    'awaitingPlayResume',\n    'duration',\n    'bufferedRanges',\n    'playedRanges',\n    'seekableRanges',\n    'volume',\n    'muted',\n    'shuffle',\n    'stalled',\n    'playbackRate',\n    'setVolumeInProgress',\n    'repeatStrategy',\n    'mediaCannotPlay'\n  ]\n});\n","import createSingleGlobalContext from './utils/createSingleGlobalContext';\n\nexport default createSingleGlobalContext({\n  displayName: 'GroupContext',\n  keysWillUpdate: ['groupProps']\n});\n","export const repeatStrategyOptions = ['none', 'playlist', 'track'];\n","import PropTypes from 'prop-types';\n\nimport { repeatStrategyOptions } from './constants';\nimport { logWarning } from './utils/console';\n\nfunction requiredOnlyUnlessHasProp(propType, altPropName) {\n  let warnedAboutDefiningBoth = false;\n  function validate(props, propName, componentName, ...rest) {\n    if (propName in props) {\n      if (!warnedAboutDefiningBoth && altPropName in props) {\n        logWarning(\n          `Do not define both the '${propName}' and '${altPropName}' props.`\n        );\n        warnedAboutDefiningBoth = true;\n      }\n      return propType.isRequired(props, propName, componentName, ...rest);\n    }\n    if (!(altPropName in props)) {\n      return new Error(\n        `If the '${altPropName}' prop is not defined, '${propName}' must be.`\n      );\n    }\n  }\n  return validate;\n}\n\nexport const controlKeyword = PropTypes.oneOf([\n  'playpause',\n  'backskip',\n  'forwardskip',\n  'volume',\n  'mute',\n  'repeat',\n  'shuffle',\n  'progress',\n  'progressdisplay',\n  'fullscreen',\n  'spacer'\n]);\n\nexport const control = PropTypes.oneOfType([PropTypes.func, controlKeyword]);\n\nexport const crossOriginAttribute = PropTypes.oneOf([\n  'anonymous',\n  'use-credentials'\n]);\n\nexport const repeatStrategy = PropTypes.oneOf(repeatStrategyOptions);\n\nexport const mediaSource = PropTypes.shape({\n  src: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n});\n\nexport const mediaSessionAction = PropTypes.oneOf([\n  'play',\n  'pause',\n  'previoustrack',\n  'nexttrack',\n  'seekbackward',\n  'seekforward'\n]);\n\nexport const mediaSessionArtwork = PropTypes.shape({\n  src: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  type: PropTypes.string\n});\n\nexport const track = PropTypes.shape({\n  url: requiredOnlyUnlessHasProp(PropTypes.string, 'sources'),\n  sources: requiredOnlyUnlessHasProp(\n    PropTypes.arrayOf(mediaSource.isRequired),\n    'url'\n  ),\n  title: PropTypes.string.isRequired,\n  artist: PropTypes.string,\n  album: PropTypes.string,\n  artwork: PropTypes.arrayOf(mediaSessionArtwork.isRequired),\n  duration: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  startingTime: PropTypes.number,\n  isUnboundedStream: PropTypes.bool,\n  meta: PropTypes.object\n});\n\nexport const seekMode = PropTypes.oneOf(['paused', 'immediate', 'onrelease']);\n","const loopchange = 'loopchange';\nconst srcrequest = 'srcrequest';\n\nfunction createCustomMediaElement(media) {\n  new MutationObserver(() => {\n    media.dispatchEvent(new Event(loopchange));\n  }).observe(media, {\n    attributes: true,\n    attributeFilter: ['loop']\n  });\n  // Don't let the media src property get modified directly.\n  // Instead, when it does get set, dispatch an event to be\n  // handled in a way that doesn't conflict with the loaded\n  // playlist.\n  Object.defineProperty(media, 'src', {\n    get: () => media.currentSrc,\n    set: src => {\n      const e = new Event(srcrequest);\n      e.srcRequested = src;\n      media.dispatchEvent(e);\n    }\n  });\n  return media;\n}\n\nexport default createCustomMediaElement;\n","/* ShuffleManager\n *\n * Manages navigation throughout a list which is:\n * - Sourced from another provided list\n * - In random order (except to avoid consecutive duplicates)\n * - Extended endlessly on-the-fly, as needed\n * - Able to have future history overwritten by non-random choices\n * - Able to swap source lists and maintain shuffle order for common members\n */\n\nexport class ShuffleManager {\n  constructor(list, options = {}) {\n    this._list = list;\n    this._forwardStack = [];\n    this._backStack = [];\n    this._currentItem = undefined;\n\n    this._allowBackShuffle = Boolean(options.allowBackShuffle);\n  }\n\n  findNextItem(currentIndex) {\n    if (currentIndex !== undefined) {\n      this.setCurrentIndex(currentIndex);\n    }\n    this._currentItem = _findNextItem(\n      this._list,\n      this._forwardStack,\n      this._backStack,\n      this._currentItem,\n      true\n    );\n    return this._currentItem;\n  }\n\n  findPreviousItem(currentIndex) {\n    if (currentIndex !== undefined) {\n      this.setCurrentIndex(currentIndex);\n    }\n    this._currentItem = _findNextItem(\n      this._list,\n      this._backStack,\n      this._forwardStack,\n      this._currentItem,\n      this._allowBackShuffle\n    );\n    return this._currentItem;\n  }\n\n  pickNextItem(index, currentIndex) {\n    if (currentIndex !== undefined) {\n      this.setCurrentIndex(currentIndex);\n    }\n    if (this._list[index] === undefined) {\n      return undefined;\n    }\n    if (this._currentItem !== undefined) {\n      this._backStack.push(this._currentItem);\n    }\n    this._forwardStack.length = 0;\n    this._currentItem = this._list[index];\n    return this._currentItem;\n  }\n\n  setList(list) {\n    this._list = list;\n  }\n\n  setOptions(options) {\n    for (const o of Object.keys(options)) {\n      switch (o) {\n        case 'allowBackShuffle':\n          this[`_${o}`] = Boolean(options[o]);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  setCurrentIndex(currentIndex) {\n    const item = this._list[currentIndex];\n    if (this._currentItem !== item) {\n      this.clear();\n      this._currentItem = item;\n    }\n  }\n\n  clear() {\n    this._forwardStack.length = 0;\n    this._backStack.length = 0;\n    this._currentItem = undefined;\n  }\n}\n\nfunction _goForward(n, forwardStack, backStack, currentItem) {\n  let item = currentItem;\n  for (let i = 0; i < n; i++) {\n    if (!forwardStack.length) {\n      // rollback before erroring (note stack reversal)\n      _goForward(i, backStack, forwardStack, item);\n      throw `Moving ${n} places was not possible!`;\n    }\n    backStack.push(item);\n    item = forwardStack.pop();\n  }\n  return item;\n}\n\nfunction _allItemsMatch(list, item) {\n  if (!list.length) {\n    return false;\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (item !== list[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction _findNextItem(list, forwardStack, backStack, currentItem, allowMore) {\n  let item = currentItem;\n  if (!list.length) {\n    return undefined;\n  }\n  for (let i = 1; i <= forwardStack.length; i++) {\n    if (list.indexOf(forwardStack[forwardStack.length - i]) !== -1) {\n      return _goForward(i, forwardStack, backStack, item);\n    }\n  }\n  if (!allowMore) {\n    return undefined;\n  }\n  if (_allItemsMatch(list, item)) {\n    // we can serve this as our \"next\" item but we\n    // won't modify our history since it's the same.\n    return item;\n  }\n  let nextItem;\n  do {\n    nextItem = list[Math.floor(Math.random() * list.length)];\n  } while (item === nextItem || nextItem === undefined);\n  // if we're skipping items that aren't in our current list we may\n  // have some items in our forwardStack - make sure we move to the front.\n  item = _goForward(forwardStack.length, forwardStack, backStack, item);\n  if (item !== undefined) {\n    backStack.push(item);\n  }\n  return nextItem;\n}\n\nexport default ShuffleManager;\n","function isPlaylistValid(playlist) {\n  return Boolean(playlist && playlist.length);\n}\n\nexport default isPlaylistValid;\n","import isPlaylistValid from './isPlaylistValid';\n\nconst blankSources = [{ src: '' }];\n\nfunction getTrackSources(playlist, index) {\n  if (!isPlaylistValid(playlist)) {\n    return blankSources;\n  }\n  const { sources, url } = playlist[index];\n  if (sources) {\n    return sources.length ? sources : blankSources;\n  }\n  return [{ src: url }];\n}\n\nexport default getTrackSources;\n","import arrayFindIndex from 'array-find-index';\n\nfunction findTrackIndexByUrl(playlist, url) {\n  return arrayFindIndex(playlist, track => {\n    if (track.sources) {\n      return arrayFindIndex(track.sources, source => source.src === url) !== -1;\n    }\n    return track.url && url === track.url;\n  });\n}\n\nexport default findTrackIndexByUrl;\n","import isPlaylistValid from './isPlaylistValid';\nimport getTrackSources from './getTrackSources';\nimport findTrackIndexByUrl from './findTrackIndexByUrl';\n\nconst veryLongKey =\n  '__highly_unstable_snapshot_internals_which_will_break_your_app_if_you_use_them_directly__';\nconst versionKey = '__cassette_snapshot_version__';\n\n// IMPORTANT: new migrations *must* always be added to the end since\n// the tracked snapshot version is based on the migration index.\n// If there is a crash-inducing bug in an existing migration, it can be patched\n// in-place, but it should never be removed from the migrations array.\nconst migrations = [\n  oldSnapshot => {\n    const { __unstable__, ...rest } = oldSnapshot;\n    return {\n      ...rest,\n      [veryLongKey]: __unstable__\n    };\n  }\n];\n\nexport function getStateSnapshot(state) {\n  const {\n    paused,\n    currentTime,\n    activeTrackIndex,\n    volume,\n    muted,\n    loop,\n    cycle,\n    shuffle,\n    playbackRate,\n    duration,\n    __playlist__\n  } = state;\n  return {\n    [versionKey]: migrations.length,\n    [veryLongKey]: {\n      paused,\n      // currentTime can't be restored for unbounded live streams\n      currentTime: duration === Infinity ? 0 : currentTime,\n      activeTrackIndex,\n      volume,\n      muted,\n      loop,\n      cycle,\n      shuffle,\n      playbackRate,\n      activeTrackSrc: isPlaylistValid(__playlist__)\n        ? getTrackSources(__playlist__, activeTrackIndex)[0].src\n        : null\n    }\n  };\n}\n\nexport function restoreStateFromSnapshot(snapshot, props) {\n  const migratedSnapshot = migrations\n    .slice(snapshot[versionKey] || 0)\n    .reduce((oldSnapshot, migration) => migration(oldSnapshot), snapshot);\n  const {\n    paused,\n    currentTime,\n    activeTrackIndex,\n    volume,\n    muted,\n    loop,\n    cycle,\n    shuffle,\n    playbackRate,\n    activeTrackSrc\n  } = migratedSnapshot[veryLongKey];\n  const restoredStateValues = {};\n  if (isPlaylistValid(props.playlist) && typeof paused === 'boolean') {\n    // using awaitingPlay instead of paused triggers an animation\n    restoredStateValues.awaitingPlay = !paused;\n  }\n  if (typeof volume === 'number' && volume >= 0 && volume <= 1) {\n    restoredStateValues.volume = volume;\n  }\n  if (typeof muted === 'boolean') {\n    restoredStateValues.muted = muted;\n  }\n  if (typeof loop === 'boolean') {\n    restoredStateValues.loop = loop;\n  }\n  if (typeof cycle === 'boolean') {\n    restoredStateValues.cycle = cycle;\n  }\n  if (typeof shuffle === 'boolean') {\n    restoredStateValues.shuffle = shuffle;\n  }\n  if (typeof playbackRate === 'number') {\n    restoredStateValues.playbackRate = playbackRate;\n  }\n  let useCurrentTime = false;\n  if (\n    typeof activeTrackSrc === 'string' &&\n    typeof activeTrackIndex === 'number' &&\n    activeTrackIndex >= 0\n  ) {\n    // let's try staying on the same track index\n    const currentSrc =\n      props.playlist[activeTrackIndex] &&\n      getTrackSources(props.playlist, activeTrackIndex)[0].src;\n    if (currentSrc && activeTrackSrc === currentSrc) {\n      restoredStateValues.activeTrackIndex = activeTrackIndex;\n      useCurrentTime = true;\n    } else {\n      /* if the track we were playing before is in the new playlist,\n       * update the activeTrackIndex.\n       */\n      const newTrackIndex = findTrackIndexByUrl(props.playlist, activeTrackSrc);\n      if (newTrackIndex !== -1) {\n        restoredStateValues.activeTrackIndex = newTrackIndex;\n        useCurrentTime = true;\n      }\n    }\n  }\n  if (useCurrentTime && typeof currentTime === 'number' && currentTime >= 0) {\n    restoredStateValues.currentTime = currentTime;\n  }\n  return restoredStateValues;\n}\n","import getTrackSources from './getTrackSources';\n\n// collapses playlist into flat list containing\n// the first source url for each track\nfunction getSourceList(playlist) {\n  return (playlist || []).map((_, i) => getTrackSources(playlist, i)[0].src);\n}\n\nexport default getSourceList;\n","function getTimeRangesArray(timeRangesObj) {\n  const timeRangesArray = Array(timeRangesObj.length);\n  for (let i = 0; i < timeRangesObj.length; i++) {\n    timeRangesArray[i] = {\n      start: timeRangesObj.start(i),\n      end: timeRangesObj.end(i)\n    };\n  }\n  return timeRangesArray;\n}\n\nexport default getTimeRangesArray;\n","function getRepeatStrategy(loop, cycle) {\n  if (loop) {\n    return 'track';\n  }\n  if (cycle) {\n    return 'playlist';\n  }\n  return 'none';\n}\n\nexport default getRepeatStrategy;\n","function convertToNumberWithinIntervalBounds(number, min, max) {\n  min = typeof min === 'number' ? min : -Infinity;\n  max = typeof max === 'number' ? max : Infinity;\n  return Math.max(min, Math.min(number, max));\n}\n\nexport default convertToNumberWithinIntervalBounds;\n","function getDisplayText(track) {\n  if (!track) {\n    return '';\n  }\n  if (track.title && track.artist) {\n    return `${track.artist} - ${track.title}`;\n  }\n  return track.title || track.artist || track.album || '';\n}\n\nexport default getDisplayText;\n","function parseTimeString(str) {\n  let seconds = 0;\n  let factor = 1;\n  const times = str.split(':').slice(-3);\n  while (times.length > 0) {\n    seconds += factor * parseInt(times.pop(), 10);\n    factor *= 60;\n  }\n  return seconds;\n}\n\nexport default parseTimeString;\n","import parseTimeString from './parseTimeString';\n\nfunction getInitialDuration(track) {\n  let duration = 0;\n  if (track.duration) {\n    if (typeof track.duration === 'string') {\n      duration = parseTimeString(track.duration);\n    } else {\n      duration = track.duration;\n    }\n  }\n  return duration;\n}\n\nexport default getInitialDuration;\n","import React, { Component, Fragment, createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport arrayFindIndex from 'array-find-index';\n\nimport PlayerContext from './PlayerContext';\nimport GroupContext from './GroupContext';\nimport * as PlayerPropTypes from './PlayerPropTypes';\nimport createCustomMediaElement from './factories/createCustomMediaElement';\nimport ShuffleManager from './utils/ShuffleManager';\nimport { getStateSnapshot, restoreStateFromSnapshot } from './utils/snapshot';\nimport getSourceList from './utils/getSourceList';\nimport getTrackSources from './utils/getTrackSources';\nimport getTimeRangesArray from './utils/getTimeRangesArray';\nimport findTrackIndexByUrl from './utils/findTrackIndexByUrl';\nimport isPlaylistValid from './utils/isPlaylistValid';\nimport getRepeatStrategy from './utils/getRepeatStrategy';\nimport convertToNumberWithinIntervalBounds from './utils/convertToNumberWithinIntervalBounds';\nimport { logError, logWarning } from './utils/console';\nimport getDisplayText from './utils/getDisplayText';\nimport getInitialDuration from './utils/getInitialDuration';\nimport { repeatStrategyOptions } from './constants';\n\nfunction playErrorHandler(err) {\n  logError(err);\n  if (err.name === 'NotAllowedError') {\n    const warningMessage =\n      'Media playback failed at ' +\n      new Date().toLocaleTimeString() +\n      '! (Perhaps autoplay is disabled in this browser.)';\n    logWarning(warningMessage);\n  }\n}\n\n// Existing Media Session API implementations have default handlers\n// for play/pause, and may yield unexpected behavior if custom\n// play/pause handlers are defined - so let's leave them be.\nconst supportableMediaSessionActions = [\n  'previoustrack',\n  'nexttrack',\n  'seekbackward',\n  'seekforward'\n];\n\nconst defaultState = {\n  // indicates whether media player should be paused\n  paused: true,\n  // elapsed time for active track, in seconds\n  currentTime: 0,\n  // The most recent targeted time, in seconds, for seek preview\n  seekPreviewTime: 0,\n  /* true if the user is currently dragging the mouse\n   * to seek a new track position\n   */\n  seekInProgress: false,\n  /* true if media was playing when seek previewing began,\n   * it was paused, and it should be resumed on seek\n   * complete\n   */\n  awaitingResumeOnSeekComplete: false,\n  // true if media will play once new track has loaded\n  awaitingPlayAfterTrackLoad: false,\n  // the duration in seconds of the loaded track\n  duration: 0,\n  // array describing the buffered ranges in the loaded track\n  bufferedRanges: [],\n  // array describing the already-played ranges in the loaded track\n  playedRanges: [],\n  // array describing the seekable ranges in the loaded track\n  seekableRanges: [],\n  // true if the media is currently stalled pending data buffering\n  stalled: false,\n  // true if the active track should play on the next componentDidUpdate\n  shouldRequestPlayOnNextUpdate: false,\n  /* true if an error occurs while fetching the active track media data\n   * or if its type is not a supported media format\n   */\n  mediaCannotPlay: false,\n  // maximum currentTime since the current track has been playing\n  maxKnownTime: 0\n};\n\n// assumes playlist is valid\nfunction getGoToTrackState({\n  prevState,\n  index,\n  track,\n  shouldPlay = true,\n  shouldForceLoad = false\n}) {\n  const isNewTrack = prevState.activeTrackIndex !== index;\n  const shouldLoadAsNew = Boolean(isNewTrack || shouldForceLoad);\n  const currentTime = track.startingTime || 0;\n  return {\n    duration: getInitialDuration(track),\n    activeTrackIndex: index,\n    trackLoading: shouldLoadAsNew,\n    mediaCannotPlay: prevState.mediaCannotPlay && !shouldLoadAsNew,\n    currentTime: convertToNumberWithinIntervalBounds(currentTime, 0),\n    loop: shouldLoadAsNew ? false : prevState.loop,\n    shouldRequestPlayOnNextUpdate: Boolean(shouldPlay),\n    awaitingPlayAfterTrackLoad: Boolean(shouldPlay),\n    awaitingForceLoad: Boolean(shouldForceLoad),\n    maxKnownTime: shouldLoadAsNew ? 0 : prevState.maxKnownTime\n  };\n}\n\n/**\n * Wraps an area which shares a common [`playerContext`](#playercontext)\n */\nexport class PlayerContextProvider extends Component {\n  constructor(props) {\n    super(props);\n    let currentTime = 0;\n    let activeTrackIndex = convertToNumberWithinIntervalBounds(\n      props.startingTrackIndex,\n      0\n    );\n    const playlistIsValid = isPlaylistValid(props.playlist);\n    if (playlistIsValid && props.playlist[activeTrackIndex]) {\n      currentTime = props.playlist[activeTrackIndex].startingTime || 0;\n    }\n    const { initialStateSnapshot } = props;\n    let restoredStateFromSnapshot = {};\n    if (initialStateSnapshot) {\n      try {\n        restoredStateFromSnapshot = restoreStateFromSnapshot(\n          initialStateSnapshot,\n          props\n        );\n        const {\n          activeTrackIndex: a,\n          currentTime: c\n        } = restoredStateFromSnapshot;\n        if (typeof a === 'number') {\n          activeTrackIndex = a;\n        }\n        if (typeof c === 'number') {\n          currentTime = c;\n        }\n      } catch (err) {\n        logWarning(err);\n        logWarning('Loading Cassette state from snapshot failed.');\n        logWarning(\n          `Failed snapshot:\\n${JSON.stringify(initialStateSnapshot, null, 2)}`\n        );\n      }\n    }\n    this.state = {\n      ...defaultState,\n      // index matching requested track (whether track has loaded or not)\n      activeTrackIndex,\n      // whether we're waiting on loading metadata for the active track\n      trackLoading: isPlaylistValid(props.playlist),\n      // the current timestamp on the active track in seconds\n      currentTime: convertToNumberWithinIntervalBounds(currentTime, 0),\n      // the latest volume of the media, between 0 and 1.\n      volume: convertToNumberWithinIntervalBounds(props.defaultVolume, 0, 1),\n      // true if the media has been muted\n      muted: props.defaultMuted,\n      // whether to loop the active track\n      loop: props.defaultRepeatStrategy === 'track',\n      // true if playlist should continue at start after completion\n      cycle: props.defaultRepeatStrategy === 'playlist',\n      // whether to randomly pick next track from playlist after one finishes\n      shuffle: props.defaultShuffle,\n      // Rate at which media should be played. 1.0 is normal speed.\n      playbackRate: props.defaultPlaybackRate,\n      // true if user is currently dragging mouse to change the volume\n      setVolumeInProgress: false,\n      // initialize shouldRequestPlayOnNextUpdate from autoplay prop\n      shouldRequestPlayOnNextUpdate: props.autoplay && playlistIsValid,\n      awaitingForceLoad: false,\n      // duration might be set on track object\n      duration: getInitialDuration(\n        playlistIsValid && props.playlist[activeTrackIndex]\n      ),\n      // playlist prop copied to state (for getDerivedStateFromProps)\n      __playlist__: props.playlist,\n      // load overrides from previously-captured state snapshot\n      ...restoredStateFromSnapshot\n    };\n\n    // volume at last time we were unmuted and not actively setting volume\n    this.lastStableVolume = this.state.volume;\n\n    // used to keep track of play history when we are shuffling\n    this.shuffler = new ShuffleManager(getSourceList(props.playlist), {\n      allowBackShuffle: props.allowBackShuffle\n    });\n\n    // html media element used for playback\n    this.media = null;\n\n    this.videoHostElementList = [];\n    this.videoHostOccupiedCallbacks = new Map();\n    this.videoHostVacatedCallbacks = new Map();\n\n    // bind internal methods\n    this.handleTrackPlaybackFailure = this.handleTrackPlaybackFailure.bind(\n      this\n    );\n\n    // bind callback methods to pass to descendant elements\n    this.togglePause = this.togglePause.bind(this);\n    this.selectTrackIndex = this.selectTrackIndex.bind(this);\n    this.forwardSkip = this.forwardSkip.bind(this);\n    this.backSkip = this.backSkip.bind(this);\n    this.seekPreview = this.seekPreview.bind(this);\n    this.seekComplete = this.seekComplete.bind(this);\n    this.setVolume = this.setVolume.bind(this);\n    this.setVolumeComplete = this.setVolumeComplete.bind(this);\n    this.toggleMuted = this.toggleMuted.bind(this);\n    this.toggleShuffle = this.toggleShuffle.bind(this);\n    this.setRepeatStrategy = this.setRepeatStrategy.bind(this);\n    this.setPlaybackRate = this.setPlaybackRate.bind(this);\n    this.registerVideoHostElement = this.registerVideoHostElement.bind(this);\n    this.renderVideoIntoHostElement = this.renderVideoIntoHostElement.bind(\n      this\n    );\n    this.unregisterVideoHostElement = this.unregisterVideoHostElement.bind(\n      this\n    );\n    this.updateVideoHostElement = this.updateVideoHostElement.bind(this);\n\n    // bind media event handlers\n    this.handleMediaPlay = this.handleMediaPlay.bind(this);\n    this.handleMediaPause = this.handleMediaPause.bind(this);\n    this.handleMediaSrcrequest = this.handleMediaSrcrequest.bind(this);\n    this.handleMediaEnded = this.handleMediaEnded.bind(this);\n    this.handleMediaEmptied = this.handleMediaEmptied.bind(this);\n    this.handleMediaStalled = this.handleMediaStalled.bind(this);\n    this.handleMediaCanplaythrough = this.handleMediaCanplaythrough.bind(this);\n    this.handleMediaCanplay = this.handleMediaCanplay.bind(this);\n    this.handleMediaTimeupdate = this.handleMediaTimeupdate.bind(this);\n    this.handleMediaLoadeddata = this.handleMediaLoadeddata.bind(this);\n    this.handleMediaVolumechange = this.handleMediaVolumechange.bind(this);\n    this.handleMediaDurationchange = this.handleMediaDurationchange.bind(this);\n    this.handleMediaProgress = this.handleMediaProgress.bind(this);\n    this.handleMediaLoopchange = this.handleMediaLoopchange.bind(this);\n    this.handleMediaRatechange = this.handleMediaRatechange.bind(this);\n  }\n\n  componentDidMount() {\n    const media = (this.media = createCustomMediaElement(\n      this.props.createMediaElement()\n    ));\n\n    const {\n      defaultPlaybackRate,\n      crossOrigin,\n      playlist,\n      autoplayDelayInSeconds,\n      mediaElementRef,\n      getPosterImageForTrack,\n      getMediaTitleAttributeForTrack,\n      onActiveTrackUpdate\n    } = this.props;\n    const {\n      volume,\n      muted,\n      playbackRate,\n      loop,\n      activeTrackIndex,\n      shouldRequestPlayOnNextUpdate\n    } = this.state;\n\n    // initialize media properties\n    // We used to set currentTime here.. now waiting for loadeddata.\n    // This avoids an issue where some browsers ignore or delay currentTime\n    // updates when in the HAVE_NOTHING state.\n    media.defaultPlaybackRate = defaultPlaybackRate;\n    if (crossOrigin) {\n      media.crossOrigin = crossOrigin;\n    }\n    media.volume = volume;\n    media.muted = muted;\n    media.playbackRate = playbackRate;\n    media.loop = loop;\n    media.setAttribute('playsinline', '');\n    media.setAttribute('webkit-playsinline', '');\n    media.setAttribute('preload', 'metadata');\n    media.setAttribute(\n      'poster',\n      getPosterImageForTrack(playlist[activeTrackIndex])\n    );\n    media.setAttribute(\n      'title',\n      getMediaTitleAttributeForTrack(playlist[activeTrackIndex])\n    );\n    // add listeners for media events\n    media.addEventListener('play', this.handleMediaPlay);\n    media.addEventListener('pause', this.handleMediaPause);\n    media.addEventListener('ended', this.handleMediaEnded);\n    media.addEventListener('stalled', this.handleMediaStalled);\n    media.addEventListener('emptied', this.handleMediaEmptied);\n    media.addEventListener('canplay', this.handleMediaCanplay);\n    media.addEventListener('canplaythrough', this.handleMediaCanplaythrough);\n    media.addEventListener('timeupdate', this.handleMediaTimeupdate);\n    media.addEventListener('loadeddata', this.handleMediaLoadeddata);\n    media.addEventListener('volumechange', this.handleMediaVolumechange);\n    media.addEventListener('durationchange', this.handleMediaDurationchange);\n    media.addEventListener('progress', this.handleMediaProgress);\n    media.addEventListener('ratechange', this.handleMediaRatechange);\n    // add listeners for special events\n    media.addEventListener('srcrequest', this.handleMediaSrcrequest);\n    media.addEventListener('loopchange', this.handleMediaLoopchange);\n\n    // set source elements for current track\n    this.setMediaElementSources();\n\n    // initially mount media element in the hidden container (this may change)\n    this.mediaContainer.appendChild(media);\n\n    if (shouldRequestPlayOnNextUpdate) {\n      this.setState({\n        shouldRequestPlayOnNextUpdate: false\n      });\n      this.delayTimeout = setTimeout(() => {\n        this.togglePause(false);\n      }, autoplayDelayInSeconds * 1000);\n    }\n\n    if (mediaElementRef) {\n      mediaElementRef(media);\n    }\n\n    if (onActiveTrackUpdate) {\n      onActiveTrackUpdate({\n        track: playlist[activeTrackIndex],\n        trackIndex: activeTrackIndex,\n        previousTrack: null,\n        previousTrackIndex: null\n      });\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const newPlaylist = nextProps.playlist;\n\n    if (newPlaylist === prevState.__playlist__) {\n      // reference comparison is equal so we'll\n      // assume the playlist is unchanged.\n      return null;\n    }\n\n    const baseNewState = {\n      __playlist__: newPlaylist\n    };\n\n    // check if the new playlist is invalid\n    if (!isPlaylistValid(newPlaylist)) {\n      return {\n        ...defaultState,\n        ...baseNewState,\n        activeTrackIndex: 0,\n        trackLoading: false\n      };\n    }\n\n    // check if the activeTrackIndex doesn't need to be updated\n    const prevSources = getTrackSources(\n      prevState.__playlist__,\n      prevState.activeTrackIndex\n    );\n\n    if (newPlaylist[prevState.activeTrackIndex]) {\n      // the sources if we stay on the same track index\n      const currentSources = getTrackSources(\n        newPlaylist,\n        prevState.activeTrackIndex\n      );\n      // non-comprehensive but probably accurate check\n      if (prevSources[0].src === currentSources[0].src) {\n        // our active track index already matches\n        return baseNewState;\n      }\n    }\n\n    /* if the track we're already playing is in the new playlist, update the\n     * activeTrackIndex.\n     */\n    const newTrackIndex = findTrackIndexByUrl(newPlaylist, prevSources[0].src);\n    if (newTrackIndex !== -1) {\n      return {\n        ...baseNewState,\n        activeTrackIndex: newTrackIndex\n      };\n    }\n\n    // if not, then load the first track in the new playlist, and pause.\n    return {\n      ...baseNewState,\n      ...getGoToTrackState({\n        prevState,\n        track: newPlaylist[0],\n        index: 0,\n        shouldPlay: false,\n        shouldForceLoad: true\n      }),\n      mediaCannotPlay: false,\n      awaitingPlayAfterTrackLoad: false\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.media.defaultPlaybackRate = this.props.defaultPlaybackRate;\n    this.media.crossOrigin = this.props.crossOrigin;\n\n    this.shuffler.setList(getSourceList(this.props.playlist));\n    this.shuffler.setOptions({\n      allowBackShuffle: this.props.allowBackShuffle\n    });\n\n    const prevSources = getTrackSources(\n      prevProps.playlist,\n      prevState.activeTrackIndex\n    );\n    const newSources = getTrackSources(\n      this.props.playlist,\n      this.state.activeTrackIndex\n    );\n    const prevTrack = prevProps.playlist[prevState.activeTrackIndex];\n    const newTrack = this.props.playlist[this.state.activeTrackIndex];\n    if (\n      this.state.awaitingForceLoad ||\n      prevSources[0].src !== newSources[0].src\n    ) {\n      this.setMediaElementSources();\n      this.media.setAttribute(\n        'poster',\n        this.props.getPosterImageForTrack(newTrack)\n      );\n      this.media.setAttribute(\n        'title',\n        this.props.getMediaTitleAttributeForTrack(newTrack)\n      );\n      this.setState({\n        awaitingForceLoad: false\n      });\n      if (!this.state.shuffle) {\n        // after toggling off shuffle, we defer clearing the shuffle\n        // history until we actually change tracks - if the user quickly\n        // toggles  shuffle off then back on again, we don't want to have\n        // lost our history.\n        this.shuffler.clear();\n      }\n    }\n\n    if (this.props.onActiveTrackUpdate && prevTrack !== newTrack) {\n      this.props.onActiveTrackUpdate({\n        track: newTrack,\n        trackIndex: this.state.activeTrackIndex,\n        previousTrack: prevTrack,\n        previousTrackIndex: prevState.activeTrackIndex\n      });\n    }\n\n    if (prevProps !== this.props && !this.media.paused) {\n      // update running media session based on new props\n      this.stealMediaSession();\n    }\n\n    if (this.state.shouldRequestPlayOnNextUpdate) {\n      this.setState({\n        shouldRequestPlayOnNextUpdate: false\n      });\n      // media.currentSrc is updated asynchronously so we should\n      // play async to avoid weird intermediate state issues\n      setTimeout(() => {\n        this.togglePause(false);\n      });\n    }\n\n    clearTimeout(this.snapshotUpdateTimeout);\n    this.snapshotUpdateTimeout = setTimeout(() => {\n      if (this.props.onStateSnapshot) {\n        this.props.onStateSnapshot(getStateSnapshot(this.state));\n      }\n    }, 100);\n  }\n\n  componentWillUnmount() {\n    const { media } = this;\n    // Media element creation will have failed if MutationObserver isn't\n    // supported by the browser. The parent might use an Error Boundary\n    // to display a fallback and so we try to avoid triggering *additional*\n    // errors while the component unmounts.\n    if (media) {\n      // remove listeners for media events\n      media.removeEventListener('play', this.handleMediaPlay);\n      media.removeEventListener('pause', this.handleMediaPause);\n      media.removeEventListener('ended', this.handleMediaEnded);\n      media.removeEventListener('stalled', this.handleMediaStalled);\n      media.removeEventListener('emptied', this.handleMediaEmptied);\n      media.removeEventListener(\n        'canplaythrough',\n        this.handleMediaCanplaythrough\n      );\n      media.removeEventListener('canplay', this.handleMediaCanplay);\n      media.removeEventListener('timeupdate', this.handleMediaTimeupdate);\n      media.removeEventListener('loadeddata', this.handleMediaLoadeddata);\n      media.removeEventListener('volumechange', this.handleMediaVolumechange);\n      media.removeEventListener(\n        'durationchange',\n        this.handleMediaDurationchange\n      );\n      media.removeEventListener('progress', this.handleMediaProgress);\n      media.removeEventListener('ratechange', this.handleMediaRatechange);\n      // remove special event listeners on the media element\n      media.removeEventListener('srcrequest', this.handleMediaSrcrequest);\n      media.removeEventListener('loopchange', this.handleMediaLoopchange);\n\n      const sourceElements = media.querySelectorAll('source');\n      for (const sourceElement of sourceElements) {\n        sourceElement.removeEventListener(\n          'error',\n          this.handleTrackPlaybackFailure\n        );\n      }\n    }\n    clearTimeout(this.gapLengthTimeout);\n    clearTimeout(this.delayTimeout);\n  }\n\n  stealMediaSession() {\n    if (\n      // eslint-disable-next-line no-undef\n      !(window.MediaSession && navigator.mediaSession instanceof MediaSession)\n    ) {\n      return;\n    }\n    // eslint-disable-next-line no-undef\n    navigator.mediaSession.metadata = new MediaMetadata(\n      this.props.playlist[this.state.activeTrackIndex]\n    );\n    supportableMediaSessionActions\n      .map(action => {\n        if (this.props.supportedMediaSessionActions.indexOf(action) === -1) {\n          return null;\n        }\n        const seekLength = this.props.mediaSessionSeekLengthInSeconds;\n        switch (action) {\n          case 'play':\n            return this.togglePause.bind(this, false);\n          case 'pause':\n            return this.togglePause.bind(this, true);\n          case 'previoustrack':\n            return this.backSkip;\n          case 'nexttrack':\n            return this.forwardSkip;\n          case 'seekbackward':\n            return () => (this.media.currentTime -= seekLength);\n          case 'seekforward':\n            return () => (this.media.currentTime += seekLength);\n          default:\n            return undefined;\n        }\n      })\n      .forEach((handler, i) => {\n        navigator.mediaSession.setActionHandler(\n          supportableMediaSessionActions[i],\n          handler\n        );\n      });\n  }\n\n  setMediaElementSources() {\n    // remove current sources\n    const { playlist } = this.props;\n    let firstChild;\n    while ((firstChild = this.media.firstChild)) {\n      this.media.removeChild(firstChild);\n    }\n    if (isPlaylistValid(playlist)) {\n      const sources = getTrackSources(playlist, this.state.activeTrackIndex);\n      // add new sources\n      for (const source of sources) {\n        const sourceElement = document.createElement('source');\n        sourceElement.src = source.src;\n        if (source.type) {\n          sourceElement.type = source.type;\n        }\n        sourceElement.addEventListener(\n          'error',\n          this.handleTrackPlaybackFailure\n        );\n        this.media.appendChild(sourceElement);\n      }\n    }\n    // cancel playback and re-scan new sources\n    this.media.load();\n  }\n\n  handleTrackPlaybackFailure(event) {\n    this.setState({\n      mediaCannotPlay: true\n    });\n    if (this.props.onTrackPlaybackFailure) {\n      this.props.onTrackPlaybackFailure({\n        track: this.props.playlist[this.state.activeTrackIndex],\n        trackIndex: this.state.activeTrackIndex,\n        event\n      });\n    }\n  }\n\n  registerVideoHostElement(hostElement, { onHostOccupied, onHostVacated }) {\n    this.videoHostElementList = this.videoHostElementList.concat(hostElement);\n    this.videoHostOccupiedCallbacks.set(hostElement, onHostOccupied);\n    this.videoHostVacatedCallbacks.set(hostElement, onHostVacated);\n  }\n\n  renderVideoIntoHostElement(hostElement) {\n    if (this.videoHostElementList.indexOf(hostElement) === -1) {\n      return;\n    }\n    cancelAnimationFrame(this.videoHostUpdateRaf);\n    this.videoHostUpdateRaf = requestAnimationFrame(() =>\n      this.updateVideoHostElement(hostElement)\n    );\n  }\n\n  unregisterVideoHostElement(hostElement) {\n    this.videoHostElementList = this.videoHostElementList.filter(\n      elem => elem !== hostElement\n    );\n    this.videoHostOccupiedCallbacks.delete(hostElement);\n    this.videoHostVacatedCallbacks.delete(hostElement);\n    if (this.media.parentNode === hostElement) {\n      this.updateVideoHostElement();\n    }\n  }\n\n  updateVideoHostElement(hostElement) {\n    if (!hostElement) {\n      hostElement = this.videoHostElementList[0] || this.mediaContainer;\n    } else {\n      // move hostElement to front of list\n      this.videoHostElementList = [hostElement].concat(\n        this.videoHostElementList.filter(elem => elem !== hostElement)\n      );\n    }\n    const playing = !this.media.paused;\n    const oldHostElement = this.media.parentNode;\n    if (hostElement === oldHostElement) {\n      return;\n    }\n    hostElement.appendChild(this.media);\n    // according to the HTML spec playback should continue, but\n    // some browsers pause the element whenever it is moved around, so\n    // let's make sure playback resumes if that's the case.\n    if (playing && this.media.paused) {\n      this.media.play();\n    }\n    const onVacated = this.videoHostVacatedCallbacks.get(oldHostElement);\n    if (onVacated) {\n      onVacated(this.media);\n    }\n    const onOccupied = this.videoHostOccupiedCallbacks.get(hostElement);\n    if (onOccupied) {\n      onOccupied(this.media);\n    }\n  }\n\n  handleMediaPlay() {\n    this.setState(\n      state =>\n        state.paused === false && state.awaitingPlayAfterTrackLoad === false\n          ? null\n          : { paused: false, awaitingPlayAfterTrackLoad: false }\n    );\n    this.stealMediaSession();\n  }\n\n  handleMediaPause() {\n    this.setState(state => (state.paused === true ? null : { paused: true }));\n  }\n\n  handleMediaSrcrequest(e) {\n    const { playlist } = this.props;\n    const sources = getTrackSources(playlist, this.state.activeTrackIndex);\n    if (arrayFindIndex(sources, s => s.src === e.srcRequested) !== -1) {\n      // we're good! nothing to update.\n      return;\n    }\n    // looks like 'src' was set from outside our component.\n    // let's see if we can use it.\n    const newTrackIndex = findTrackIndexByUrl(playlist, e.srcRequested);\n    if (newTrackIndex === -1) {\n      logError(\n        `Source '${e.srcRequested}' does not exist in the loaded playlist. ` +\n          `Make sure you've updated the 'playlist' prop to ` +\n          `PlayerContextProvider before you select this track!`\n      );\n      return;\n    }\n    this.selectTrackIndex(newTrackIndex);\n  }\n\n  handleMediaEnded() {\n    if (this.state.seekInProgress) {\n      // nothing to do if we're in the middle of a seek\n      // (this can happen if we're in seekMode: immediate)\n      return;\n    }\n    clearTimeout(this.gapLengthTimeout);\n    const { playlist, loadFirstTrackOnPlaylistComplete } = this.props;\n    if (!isPlaylistValid(playlist)) {\n      return;\n    }\n    const { cycle, activeTrackIndex } = this.state;\n    if (!cycle && activeTrackIndex + 1 >= playlist.length) {\n      if (loadFirstTrackOnPlaylistComplete) {\n        this.goToTrack({\n          index: 0,\n          track: playlist[0],\n          shouldPlay: false,\n          shouldForceLoad: true\n        });\n      }\n      return;\n    }\n    this.gapLengthTimeout = setTimeout(\n      this.forwardSkip,\n      this.props.gapLengthInSeconds * 1000\n    );\n  }\n\n  handleMediaStalled() {\n    this.setState(state => (state.stalled === true ? null : { stalled: true }));\n  }\n\n  handleMediaEmptied() {\n    this.setState(state => (state.paused === true ? null : { paused: true }));\n  }\n\n  handleMediaCanplay() {\n    this.setState(\n      state => (state.trackLoading === false ? null : { trackLoading: false })\n    );\n  }\n\n  handleMediaCanplaythrough() {\n    this.setState(\n      state => (state.stalled === false ? null : { stalled: false })\n    );\n  }\n\n  handleMediaTimeupdate() {\n    const { currentTime, played } = this.media;\n    const { onTimeUpdate, playlist } = this.props;\n    const { activeTrackIndex, trackLoading } = this.state;\n    if (trackLoading) {\n      // we'll get another time update when the track loads\n      // but for now this helps us avoid unnecessarily\n      // jumping back to currentTime: 0 in the UI while\n      // the track is loading.\n      return;\n    }\n    this.setState(state => ({\n      currentTime,\n      playedRanges: getTimeRangesArray(played),\n      maxKnownTime: Math.max(state.maxKnownTime, currentTime)\n    }));\n    if (onTimeUpdate) {\n      onTimeUpdate({\n        currentTime,\n        track: playlist[activeTrackIndex],\n        trackIndex: activeTrackIndex\n      });\n    }\n  }\n\n  handleMediaLoadeddata() {\n    if (this.media.currentTime !== this.state.currentTime) {\n      this.media.currentTime = this.state.currentTime;\n    }\n  }\n\n  handleMediaVolumechange() {\n    const { volume, muted } = this.media;\n    this.setState({ volume, muted });\n  }\n\n  handleMediaDurationchange() {\n    const { duration } = this.media;\n    const activeTrack = this.props.playlist[this.state.activeTrackIndex];\n    if (duration === Infinity) {\n      // This *could* be because we're consuming an unbounded stream.\n      // It could also be because of a weird iOS bug that we want to\n      // try to prevent. See https://github.com/benwiley4000/cassette/issues/355\n\n      // If we still end up with Infinity duration multiple times for\n      // the same track, we'll assume it's correct.\n      if (\n        activeTrack.isUnboundedStream ||\n        activeTrack === this.activeTrackAtLastDurationChange\n      ) {\n        this.setState({\n          duration,\n          currentTime: 0\n        });\n        this.media.currentTime = 0;\n      } else {\n        const { paused } = this.state;\n        this.media.load();\n        if (!paused) {\n          // media.currentSrc is updated asynchronously so we should\n          // play async to avoid weird intermediate state issues\n          setTimeout(() => {\n            this.togglePause(false);\n          });\n        }\n      }\n    } else {\n      this.setState({ duration });\n    }\n    this.activeTrackAtLastDurationChange = activeTrack;\n  }\n\n  handleMediaProgress() {\n    this.setState({\n      bufferedRanges: getTimeRangesArray(this.media.buffered),\n      seekableRanges: getTimeRangesArray(this.media.seekable)\n    });\n  }\n\n  handleMediaLoopchange() {\n    const { loop } = this.media;\n    this.setState(state => (state.loop === loop ? null : { loop }));\n  }\n\n  handleMediaRatechange() {\n    const { playbackRate } = this.media;\n    this.setState(\n      state => (state.playbackRate === playbackRate ? null : { playbackRate })\n    );\n  }\n\n  togglePause(value) {\n    clearTimeout(this.delayTimeout);\n    const pause = typeof value === 'boolean' ? value : !this.state.paused;\n    if (pause) {\n      this.media.pause();\n      return;\n    }\n    if (!this.media.currentSrc) {\n      return;\n    }\n    try {\n      const playPromise = this.media.play();\n      if (playPromise && typeof playPromise.catch === 'function') {\n        playPromise\n          .catch(err => {\n            // AbortError is pretty much always called because we're skipping\n            // tracks quickly or hitting pause before a track has a chance to\n            // play. It's pretty safe to just ignore these error messages.\n            if (err.name !== 'AbortError') {\n              return Promise.reject(err);\n            }\n          })\n          .catch(playErrorHandler);\n      }\n    } catch (err) {\n      playErrorHandler(err);\n    }\n  }\n\n  // assumes playlist is valid - don't call without checking\n  goToTrack(args) {\n    clearTimeout(this.delayTimeout);\n    this.setState(prevState => getGoToTrackState({ prevState, ...args }));\n  }\n\n  selectTrackIndex(index) {\n    const { playlist } = this.props;\n    if (!isPlaylistValid(playlist)) {\n      return;\n    }\n    if (index < 0 || index > playlist.length) {\n      logWarning(`Playlist index ${index} is out of bounds!`);\n      return;\n    }\n    if (this.state.shuffle) {\n      this.shuffler.pickNextItem(index, this.state.activeTrackIndex);\n    }\n    this.goToTrack({ index, track: playlist[index] });\n  }\n\n  backSkip() {\n    const { playlist, stayOnBackSkipThreshold } = this.props;\n    const { media } = this;\n    const { cycle, activeTrackIndex, shuffle } = this.state;\n    if (\n      !isPlaylistValid(playlist) ||\n      media.currentTime >= stayOnBackSkipThreshold ||\n      (!cycle && activeTrackIndex < 1)\n    ) {\n      media.currentTime = 0;\n      return;\n    }\n    let index;\n    if (shuffle) {\n      const previousItem = this.shuffler.findPreviousItem(activeTrackIndex);\n      if (previousItem === undefined) {\n        // if we aren't allowing backShuffle then we'll hit a stopping point.\n        media.currentTime = 0;\n        return;\n      }\n      index = findTrackIndexByUrl(playlist, previousItem);\n    } else {\n      index = activeTrackIndex - 1;\n      if (index < 0) {\n        index = playlist.length - 1;\n      }\n    }\n    this.goToTrack({ index, track: playlist[index], shouldForceLoad: true });\n  }\n\n  forwardSkip() {\n    const { playlist } = this.props;\n    const { cycle, activeTrackIndex, shuffle } = this.state;\n    if (\n      !isPlaylistValid(playlist) ||\n      (!cycle && activeTrackIndex + 1 >= playlist.length)\n    ) {\n      return;\n    }\n    let index;\n    if (shuffle) {\n      index = findTrackIndexByUrl(\n        playlist,\n        this.shuffler.findNextItem(activeTrackIndex)\n      );\n    } else {\n      index = activeTrackIndex + 1;\n      if (index >= playlist.length) {\n        index = 0;\n      }\n    }\n    this.goToTrack({ index, track: playlist[index], shouldForceLoad: true });\n  }\n\n  seekPreview(targetTime) {\n    if (!isPlaylistValid(this.props.playlist)) {\n      return;\n    }\n    const baseStateUpdate = {\n      seekPreviewTime: targetTime,\n      seekInProgress: true\n    };\n    switch (this.props.seekMode) {\n      case 'paused':\n        this.setState(({ paused, awaitingResumeOnSeekComplete }) => ({\n          ...baseStateUpdate,\n          awaitingResumeOnSeekComplete: paused\n            ? awaitingResumeOnSeekComplete\n            : true,\n          currentTime: targetTime\n        }));\n        if (!this.state.trackLoading) {\n          this.media.currentTime = targetTime;\n        }\n        if (!this.state.paused) {\n          this.togglePause(true);\n        }\n        break;\n      case 'immediate':\n        this.setState(({ paused, awaitingResumeOnSeekComplete }) => ({\n          ...baseStateUpdate,\n          awaitingResumeOnSeekComplete: paused\n            ? awaitingResumeOnSeekComplete\n            : true,\n          currentTime: targetTime\n        }));\n        if (!this.state.trackLoading) {\n          this.media.currentTime = targetTime;\n        }\n        if (this.state.awaitingResumeOnSeekComplete && !this.media.ended) {\n          // if we earlier encountered an 'ended' state,\n          // un-pausing becomes necessary to resume playback\n          this.togglePause(false);\n        }\n        break;\n      case 'onrelease':\n        this.setState(baseStateUpdate);\n        break;\n    }\n  }\n\n  seekComplete(targetTime) {\n    const {\n      seekPreviewTime,\n      awaitingResumeOnSeekComplete,\n      trackLoading\n    } = this.state;\n    const baseStateUpdate = {\n      seekInProgress: false,\n      awaitingResumeOnSeekComplete: false\n    };\n    const currentTime =\n      typeof targetTime === 'number' ? targetTime : seekPreviewTime;\n\n    if (isNaN(currentTime)) {\n      this.setState(baseStateUpdate);\n      return;\n    }\n    this.setState({\n      ...baseStateUpdate,\n      /* we'll update currentTime on the media listener hook anyway,\n       * but that might not happen for a bit... so the optimistic update\n       * helps us avoid the progress bar jumping around and confusing the user.\n       * https://github.com/benwiley4000/cassette/issues/209\n       */\n      currentTime\n    });\n    if (!trackLoading) {\n      this.media.currentTime = currentTime;\n    }\n    if (awaitingResumeOnSeekComplete) {\n      if (this.media.ended) {\n        this.forwardSkip();\n      } else {\n        this.togglePause(false);\n      }\n    }\n  }\n\n  setVolume(volume, inProgress = true) {\n    if (inProgress && !this.state.setVolumeInProgress) {\n      this.setState({\n        setVolumeInProgress: true\n      });\n    }\n    const volumeInBounds = convertToNumberWithinIntervalBounds(volume, 0, 1);\n    this.media.muted = volumeInBounds === 0 ? true : false;\n    this.media.volume = volumeInBounds;\n  }\n\n  setVolumeComplete(volume) {\n    if (typeof volume === 'number') {\n      this.setVolume(volume, false);\n    }\n    this.setState({\n      setVolumeInProgress: false\n    });\n    if (!this.media.muted) {\n      this.lastStableVolume = this.media.volume;\n    }\n  }\n\n  toggleMuted(value) {\n    const muted = typeof value === 'boolean' ? value : !this.state.muted;\n    this.media.muted = muted;\n    if (!muted) {\n      this.media.volume = this.lastStableVolume;\n    }\n  }\n\n  toggleShuffle(value) {\n    const shuffle = typeof value === 'boolean' ? value : !this.state.shuffle;\n    this.setState({ shuffle });\n  }\n\n  setRepeatStrategy(repeatStrategy) {\n    if (repeatStrategyOptions.indexOf(repeatStrategy) === -1) {\n      logWarning(\n        'repeatStrategy \"' +\n          repeatStrategy +\n          '\" is not one of: ' +\n          repeatStrategyOptions.split(', ') +\n          '.'\n      );\n      return;\n    }\n    switch (repeatStrategy) {\n      case 'track':\n        // state update is automatic\n        this.media.loop = true;\n        break;\n      case 'playlist':\n        this.setState({\n          loop: false,\n          cycle: true\n        });\n        this.media.loop = false;\n        break;\n      case 'none':\n        this.setState({\n          loop: false,\n          cycle: false\n        });\n        this.media.loop = false;\n        break;\n    }\n  }\n\n  setPlaybackRate(rate) {\n    this.media.playbackRate = rate;\n  }\n\n  getControlProps() {\n    const { props, state } = this;\n    const playerContext = {\n      playlist: props.playlist,\n      activeTrackIndex: state.activeTrackIndex,\n      trackLoading: state.trackLoading,\n      paused: state.paused,\n      currentTime: state.currentTime,\n      seekPreviewTime: state.seekPreviewTime,\n      seekInProgress: state.seekInProgress,\n      awaitingPlayResume:\n        state.awaitingResumeOnSeekComplete || state.awaitingPlayAfterTrackLoad,\n      duration:\n        state.duration === Infinity ? state.maxKnownTime : state.duration,\n      bufferedRanges: state.bufferedRanges,\n      playedRanges: state.playedRanges,\n      seekableRanges: state.seekableRanges,\n      volume: state.volume,\n      muted: state.muted,\n      shuffle: state.shuffle,\n      stalled: state.stalled,\n      playbackRate: state.playbackRate,\n      mediaCannotPlay: state.mediaCannotPlay,\n      setVolumeInProgress: state.setVolumeInProgress,\n      repeatStrategy: getRepeatStrategy(state.loop, state.cycle),\n      registerVideoHostElement: this.registerVideoHostElement,\n      renderVideoIntoHostElement: this.renderVideoIntoHostElement,\n      unregisterVideoHostElement: this.unregisterVideoHostElement,\n      onTogglePause: this.togglePause,\n      onSelectTrackIndex: this.selectTrackIndex,\n      onBackSkip: this.backSkip,\n      onForwardSkip: this.forwardSkip,\n      onSeekPreview: this.seekPreview,\n      onSeekComplete: this.seekComplete,\n      onSetVolume: this.setVolume,\n      onSetVolumeComplete: this.setVolumeComplete,\n      onToggleMuted: this.toggleMuted,\n      onToggleShuffle: this.toggleShuffle,\n      onSetRepeatStrategy: this.setRepeatStrategy,\n      onSetPlaybackRate: this.setPlaybackRate\n    };\n    if (this.playerContext) {\n      // only update this.playerContext if something has changed\n      for (const key of Object.keys(this.playerContext)) {\n        if (playerContext[key] !== this.playerContext[key]) {\n          this.playerContext = playerContext;\n          break;\n        }\n      }\n    } else {\n      // first time - nothing to compare\n      this.playerContext = playerContext;\n    }\n    return this.playerContext;\n  }\n\n  render() {\n    const playerContext = this.getControlProps();\n    return (\n      <Fragment>\n        <div ref={elem => (this.mediaContainer = elem)} hidden />\n        <PlayerContext.Provider value={playerContext}>\n          {typeof this.props.children === 'function'\n            ? this.props.children(playerContext)\n            : this.props.children}\n        </PlayerContext.Provider>\n      </Fragment>\n    );\n  }\n}\n\nPlayerContextProvider.propTypes = {\n  /**\n   * An array of [`track`](#track) objects to play in order (except when\n   * shuffle mode is turned on)\n   **/\n  playlist: PropTypes.arrayOf(PlayerPropTypes.track.isRequired).isRequired,\n  /** Set to `true` to play media on player load. Think before doing this. It is\n   * often a bad idea, although it can make sense if your app is expressly made\n   * for media playback and you're resuming playback from the last session.\n   * Note that some platforms will disallow this from happening under many\n   * scenarios, and in these cases, `autoplay` will simply fail gracefully.\n   */\n  autoplay: PropTypes.bool.isRequired,\n  /**\n   * If your app uses a custom implementation of the `HTMLMediaElement`, you\n   * can supply your own factory function to return it. This is an advanced\n   * edge case.\n   */\n  createMediaElement: PropTypes.func.isRequired,\n  /** If you're using `autoplay` but want to wait a few seconds before the\n   * media playback kicks in, you can specify that timeout in second here.\n   */\n  autoplayDelayInSeconds: PropTypes.number.isRequired,\n  /**\n   * Similar to `autoplayDelayInSeconds` but for the pause between tracks\n   * (if you want to evoke the feeling of listening to one of those old CDs with\n   * a negative countdown before it starts, which you never asked for).\n   */\n  gapLengthInSeconds: PropTypes.number.isRequired,\n  /** A [`crossOriginAttribute`](#crossoriginattribute) value */\n  crossOrigin: PlayerPropTypes.crossOriginAttribute,\n  /** The starting volume (0-1) */\n  defaultVolume: PropTypes.number.isRequired,\n  /** The starting `muted` value (`true` or `false`) */\n  defaultMuted: PropTypes.bool,\n  /** The starting [`repeatStrategy`](#repeatstrategy) */\n  defaultRepeatStrategy: PlayerPropTypes.repeatStrategy.isRequired,\n  /** Will shuffle mode be active by default? */\n  defaultShuffle: PropTypes.bool,\n  /** The starting playback rate (1 is normal, 0.5 is half, 2 is double) */\n  defaultPlaybackRate: PropTypes.number.isRequired,\n  /**\n   * The starting track index (an advanced use case.. normally you should put\n   * the track you want to hear first at the start of the playlist, unless\n   * you are loading an `initialStateSnapshot` which will override this value\n   * anyway\n   */\n  startingTrackIndex: PropTypes.number.isRequired,\n  /**\n   * Set this `false` if the player should rest of the final track when\n   * the playlist has completed. Ignored unless the\n   * current [`repeatStrategy`](#repeatstrategy) is `none`\n   */\n  loadFirstTrackOnPlaylistComplete: PropTypes.bool,\n  /** Use this to set the player's [`seekMode`](#seekmode) */\n  seekMode: PlayerPropTypes.seekMode.isRequired,\n  /**\n   * The default media element behavior is to reset the `playbackRate` to 1\n   * whenever a new source is loaded. Set this prop to `true` to maintain the\n   * same irregular playback rate across multiple tracks.\n   */\n  maintainPlaybackRate: PropTypes.bool.isRequired,\n  /**\n   * By default, activating a back skip in shuffle mode will select the previous\n   * track in the shuffled list, but if the current track was the first selected\n   * track, back skip will be disabled. Setting this prop to `true` will\n   * select new arbitrary tracks in the \"past\" if back skip is used beyond\n   * the buffered history.\n   */\n  allowBackShuffle: PropTypes.bool,\n  /**\n   * The number of seconds before pressing back skip becomes \"back to\n   * beginning of current track\" rather than \"go to the previous track\"\n   */\n  stayOnBackSkipThreshold: PropTypes.number.isRequired,\n  /**\n   * An array of [`mediaSessionAction`](#mediasessionaction) types to display\n   * in the end users's system UI, when applicable.\n   * It is *not* the same as the `controls` array.\n   */\n  supportedMediaSessionActions: PropTypes.arrayOf(\n    PlayerPropTypes.mediaSessionAction.isRequired\n  ).isRequired,\n  /** The number of seconds to seek back or forward when the Media Session API\n   * backseek/forwardseek buttons are activated in the end user's system UI\n   */\n  mediaSessionSeekLengthInSeconds: PropTypes.number.isRequired,\n  /**\n   * A function called on component mount and component unmount with a reference\n   * to the underlying media element. Generally not recommended for use, but\n   * can be used as an escape hatch for features that aren't well-supported by\n   * Cassette (if you find yourself needing this, you may want to\n   * [open a new issue](https://github.com/benwiley4000/cassette/issues/new)\n   * to talk about adding first-class support for your use case).\n   */\n  mediaElementRef: PropTypes.func,\n  /**\n   * If you're using `onStateSnapshot` to save snapshots of the media player\n   * state as a serializable object, you should pass that restored object here\n   * to preserve the user's state from the previous session\n   */\n  initialStateSnapshot: PropTypes.object,\n  /**\n   * Called whenever a new state snapshot is generated. The internals of this\n   * snapshot are not documented and may change in a non-major release, so it's\n   * not safe to rely on them directly. Instead, the state snapshot should\n   * be serialized to JSON with `JSON.stringify` and restored later with\n   * `JSON.parse` to be passed as the `initialStateSnapshot` prop\n   */\n  onStateSnapshot: PropTypes.func,\n  /**\n   * A function called whenever the active track is set or updated. Passed an\n   * object with the properties `track`, `trackIndex`, `previousTrack` and\n   * `previousTrackIndex` (these may be `null` or `undefined`)\n   */\n  onActiveTrackUpdate: PropTypes.func,\n  /**\n   * A function called when the media element's `currentTime` attribute has\n   * changed. Passed an object with the properties `currentTime`, `track` and\n   * `trackIndex`\n   */\n  onTimeUpdate: PropTypes.func,\n  /**\n   * A function called when playback of the current track has failed for some\n   * reason. Passed an object with the properties `event`,\n   * `track` and `trackIndex`\n   */\n  onTrackPlaybackFailure: PropTypes.func,\n  /**\n   * A function which receives a [`track`](#track) object (if one is active)\n   * and returns a url pointing to a poster image representing the current\n   * track which should be used in a [`VideoDisplay`](#videodisplay) when the\n   * media content hasn't yet loaded\n   */\n  getPosterImageForTrack: PropTypes.func.isRequired,\n  /**\n   * A function which receives a [`track`](#track) object (if one is active)\n   * and returns the value for the media element's `title` attribute, which\n   * may be used in iOS to display information about the current track in the\n   * system UI\n   */\n  getMediaTitleAttributeForTrack: PropTypes.func.isRequired,\n  /**\n   * Either a renderable React node or a render prop function like the\n   * one passed into [`PlayerContextConsumer`](#playercontextconsumer)\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired\n};\n\nPlayerContextProvider.defaultProps = {\n  autoplay: false,\n  autoplayDelayInSeconds: 0,\n  createMediaElement: () => document.createElement('video'),\n  gapLengthInSeconds: 0,\n  defaultVolume: 1,\n  defaultMuted: false,\n  defaultRepeatStrategy: 'playlist',\n  defaultShuffle: false,\n  defaultPlaybackRate: 1,\n  startingTrackIndex: 0,\n  loadFirstTrackOnPlaylistComplete: true,\n  seekMode: 'immediate',\n  maintainPlaybackRate: false,\n  allowBackShuffle: false,\n  stayOnBackSkipThreshold: 5,\n  supportedMediaSessionActions: ['play', 'pause', 'previoustrack', 'nexttrack'],\n  mediaSessionSeekLengthInSeconds: 10,\n  getPosterImageForTrack(track) {\n    return track && track.artwork ? track.artwork[0].src : '';\n  },\n  getMediaTitleAttributeForTrack: getDisplayText\n};\n\nexport class PlayerContextGroupMember extends Component {\n  componentDidMount() {\n    this.props.groupContext.registerMediaElement(this.mediaElement);\n  }\n\n  componentWillUnmount() {\n    // Media element might not exist\n    // (see componentWillUnmount of PlayerContextProvider)\n    if (this.mediaElement) {\n      this.props.groupContext.unregisterMediaElement(this.mediaElement);\n    }\n  }\n\n  render() {\n    const { groupContext, props } = this.props;\n    const { mediaElementRef, ...rest } = props;\n    return (\n      <PlayerContextProvider\n        {...groupContext.groupProps}\n        {...rest}\n        mediaElementRef={ref => {\n          if (mediaElementRef) {\n            mediaElementRef(ref);\n          }\n          this.mediaElement = ref;\n        }}\n      />\n    );\n  }\n}\n\nPlayerContextGroupMember.propTypes = {\n  groupContext: PropTypes.shape({\n    groupProps: PropTypes.object.isRequired,\n    registerMediaElement: PropTypes.func.isRequired,\n    unregisterMediaElement: PropTypes.func.isRequired\n  }).isRequired\n};\n\nfunction PlayerContextGroupConsumer(props) {\n  return (\n    <GroupContext.Consumer>\n      {groupContext => {\n        if (!groupContext) {\n          return createElement(PlayerContextProvider, props);\n        }\n        return createElement(PlayerContextGroupMember, {\n          groupContext,\n          props\n        });\n      }}\n    </GroupContext.Consumer>\n  );\n}\n\nexport default PlayerContextGroupConsumer;\n","// TODO: support Preact, Inferno, etc.\nfunction getReactParentNameStack(componentInstance) {\n  const fiber = componentInstance._reactInternalFiber;\n  const parentStack = [];\n  let owner = fiber;\n  if (!owner) {\n    return parentStack;\n  }\n  while ((owner = owner._debugOwner)) {\n    if (owner.type.name) {\n      parentStack.push(owner.type.name);\n    }\n  }\n  return parentStack;\n}\n\nexport default getReactParentNameStack;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport PlayerContext from './PlayerContext';\n\nimport { logWarning } from './utils/console';\nimport getReactParentNameStack from './utils/getReactParentNameStack';\n\nclass PlayerContextConsumer extends PureComponent {\n  render() {\n    const { children, filterList } = this.props;\n    if (!filterList) {\n      if (!this.warnedAboutFilterList) {\n        let warning = `\n          Please pass the filterList prop to PlayerContextConsumer in order\n          to avoid unnecessarily frequent re-renders, e.g.\n\n          const filterList = ['paused', 'onTogglePause'];\n          // ...\n          <PlayerContextConsumer filterList={filterList}>\n            {({ paused, onTogglePause }) => {\n              return <div>{/* ... */}</div>;\n            }}\n          </PlayerContextConsumer>\n        `;\n        for (const parentName of getReactParentNameStack(this)) {\n          warning += `\n            Rendered by ${parentName}`;\n        }\n        logWarning(warning);\n        this.warnedAboutFilterList = true;\n      }\n      return <PlayerContext.Consumer>{children}</PlayerContext.Consumer>;\n    }\n\n    const flags = PlayerContext.__cassetteGetObservedBits(filterList);\n    return (\n      <PlayerContext.Consumer unstable_observedBits={flags}>\n        {playerContext => {\n          const usedContext = {};\n          for (const name of filterList) {\n            if (playerContext.hasOwnProperty(name)) {\n              usedContext[name] = playerContext[name];\n            }\n          }\n          return children(usedContext);\n        }}\n      </PlayerContext.Consumer>\n    );\n  }\n}\n\nPlayerContextConsumer.propTypes = {\n  /**\n   * A [render prop](https://reactjs.org/docs/render-props.html) function\n   * which receives as its argument an object with the latest values of the\n   * keys specified in the `filterList` prop (if you forget `filterList`, you\n   * will get all the `playerContext` values and a warning in the console)\n   */\n  children: PropTypes.func.isRequired,\n  /**\n   * A full list of `playerContext` values which will need to be consumed.\n   * Similar to the prop name array passed to\n   * [`playerContextFilter`](#playercontextfilter), but only made up of values\n   * found in [`playerContext`](#playercontext).\n   *\n   */\n  filterList: PropTypes.arrayOf(PropTypes.string.isRequired)\n};\n\nexport default PlayerContextConsumer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport GroupContext from './GroupContext';\n\n/**\n * A wrapper which can be used to share configuration among multiple descendant [`PlayerContextProvider`](#playercontextprovider) instances as well as prevent multiple media elements from playing audio simultaneously\n */\nexport class PlayerContextGroup extends Component {\n  constructor(props) {\n    super(props);\n    this.registerMediaElement = this.registerMediaElement.bind(this);\n    this.unregisterMediaElement = this.unregisterMediaElement.bind(this);\n    this.enforceOneMediaSourceOnly = this.enforceOneMediaSourceOnly.bind(this);\n    this.mediaElements = [];\n  }\n\n  registerMediaElement(elem) {\n    this.mediaElements = this.mediaElements.concat(elem);\n    elem.addEventListener('play', this.enforceOneMediaSourceOnly, true);\n    elem.addEventListener('volumechange', this.enforceOneMediaSourceOnly, true);\n  }\n\n  unregisterMediaElement(elem) {\n    this.mediaElements = this.mediaElements.filter(element => elem !== element);\n    elem.removeEventListener('play', this.enforceOneMediaSourceOnly, true);\n    elem.removeEventListener(\n      'volumechange',\n      this.enforceOneMediaSourceOnly,\n      true\n    );\n  }\n\n  enforceOneMediaSourceOnly(e) {\n    const mediaElement = e.target;\n    const { paused, muted } = mediaElement;\n    if (paused || muted) {\n      return;\n    }\n    for (const element of this.mediaElements) {\n      if (element !== mediaElement && !element.muted) {\n        element.pause();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <GroupContext.Consumer>\n        {groupContext => {\n          const value = groupContext\n            ? {\n                ...groupContext,\n                groupProps: { ...groupContext.groupProps, ...this.props }\n              }\n            : {\n                groupProps: this.props,\n                registerMediaElement: this.registerMediaElement,\n                unregisterMediaElement: this.unregisterMediaElement\n              };\n          return (\n            <GroupContext.Provider value={value}>\n              {this.props.children}\n            </GroupContext.Provider>\n          );\n        }}\n      </GroupContext.Consumer>\n    );\n  }\n}\n\nPlayerContextGroup.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default PlayerContextGroup;\n","import createSingleGlobalContext from './utils/createSingleGlobalContext';\nimport { logWarning } from './utils/console';\n\nexport default createSingleGlobalContext({\n  displayName: 'FullscreenContext',\n  defaultValue: {\n    fullscreen: false,\n    requestFullscreen() {\n      logWarning(\n        'Fullscreen request ignored since there is no ' +\n          'FullscreenContextProvider ancestor.'\n      );\n    },\n    requestExitFullscreen() {\n      logWarning(\n        'Exit fullscreen request ignored since there is no ' +\n          'FullscreenContextProvider ancestor.'\n      );\n    }\n  },\n  keysWillUpdate: ['fullscreen']\n});\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport FullscreenContext from './FullscreenContext';\n\nconst fullscreenStyle = {\n  width: '100%',\n  height: '100%'\n};\n\n/**\n * Wraps an area which should be fullscreen-able\n */\nexport class FullscreenContextProvider extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fullscreen: false\n    };\n    this.requestFullscreen = this.requestFullscreen.bind(this);\n    this.requestExitFullscreen = this.requestExitFullscreen.bind(this);\n    this.handleFullscreenChange = this.handleFullscreenChange.bind(this);\n    this.fullscreenElement = null;\n  }\n\n  componentDidMount() {\n    document.addEventListener('fullscreenchange', this.handleFullscreenChange);\n    document.addEventListener(\n      'webkitfullscreenchange',\n      this.handleFullscreenChange\n    );\n    document.addEventListener(\n      'mozfullscreenchange',\n      this.handleFullscreenChange\n    );\n    document.addEventListener(\n      'msfullscreenchange',\n      this.handleFullscreenChange\n    );\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\n      'fullscreenchange',\n      this.handleFullscreenChange\n    );\n    document.removeEventListener(\n      'webkitfullscreenchange',\n      this.handleFullscreenChange\n    );\n    document.removeEventListener(\n      'mozfullscreenchange',\n      this.handleFullscreenChange\n    );\n    document.removeEventListener(\n      'msfullscreenchange',\n      this.handleFullscreenChange\n    );\n  }\n\n  requestFullscreen() {\n    if (!this.props.fullscreenEnabled) {\n      return;\n    }\n    if (this.fullscreenElement.requestFullscreen) {\n      this.fullscreenElement.requestFullscreen();\n    } else if (this.fullscreenElement.webkitRequestFullscreen) {\n      this.fullscreenElement.webkitRequestFullscreen();\n    } else if (this.fullscreenElement.mozRequestFullscreen) {\n      this.fullscreenElement.mozRequestFullScreen();\n    } else if (this.fullscreenElement.msRequestFullscreen) {\n      this.fullscreenElement.msRequestFullscreen();\n    }\n  }\n\n  requestExitFullscreen() {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.msExitFullscreen) {\n      document.mozExitFullscreen();\n    }\n  }\n\n  handleFullscreenChange() {\n    const documentFullscreenElement =\n      document.fullscreenElement ||\n      document.webkitFullscreenElement ||\n      document.mozFullScreenElement ||\n      document.msFullscreenElement;\n    this.setState({\n      fullscreen: documentFullscreenElement === this.fullscreenElement\n    });\n  }\n\n  getFullscreenContext() {\n    const fullscreenContext = {\n      fullscreen: this.state.fullscreen,\n      requestFullscreen: this.requestFullscreen,\n      requestExitFullscreen: this.requestExitFullscreen\n    };\n    if (\n      this.fullscreenContext &&\n      fullscreenContext.fullscreen === this.fullscreenContext.fullscreen\n    ) {\n      // no change\n      return this.fullscreenContext;\n    }\n    return (this.fullscreenContext = fullscreenContext);\n  }\n\n  render() {\n    const fullscreenContext = this.getFullscreenContext();\n    return (\n      <div\n        ref={elem => (this.fullscreenElement = elem)}\n        style={this.state.fullscreen ? fullscreenStyle : undefined}\n      >\n        <FullscreenContext.Provider value={fullscreenContext}>\n          {typeof this.props.children === 'function'\n            ? this.props.children(fullscreenContext)\n            : this.props.children}\n        </FullscreenContext.Provider>\n      </div>\n    );\n  }\n}\n\nFullscreenContextProvider.propTypes = {\n  /** If set `false`, disables fullscreen for the wrapped area */\n  fullscreenEnabled: PropTypes.bool.isRequired,\n  /**\n   * Either a renderable React node or a render prop function like the\n   * one passed into [`FullscreenContextConsumer`](#fullscreencontextconsumer)\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired\n};\n\nFullscreenContextProvider.defaultProps = {\n  fullscreenEnabled: true\n};\n\nexport default FullscreenContextProvider;\n","import React, { createElement } from 'react';\n\nimport PlayerContext from './PlayerContext';\nimport FullscreenContext from './FullscreenContext';\nimport { logWarning } from './utils/console';\n\nfunction playerContextFilter(component, contextPropNames) {\n  const warned = {};\n  const childName = component.displayName || component.name;\n  const flags = PlayerContext.__cassetteGetObservedBits(contextPropNames);\n  function PlayerContextFilter(props) {\n    return (\n      <FullscreenContext.Consumer>\n        {fullscreenContext => (\n          <PlayerContext.Consumer unstable_observedBits={flags}>\n            {playerContext => {\n              const childProps = { ...props };\n              for (const propName of contextPropNames) {\n                if (playerContext.hasOwnProperty(propName)) {\n                  childProps[propName] = playerContext[propName];\n                } else if (fullscreenContext.hasOwnProperty(propName)) {\n                  childProps[propName] = fullscreenContext[propName];\n                } else if (!warned[propName]) {\n                  logWarning(\n                    \"Prop '\" +\n                      propName +\n                      \"' for component \" +\n                      childName +\n                      ' not found in playerContext or fullscreenContext.'\n                  );\n                  warned[propName] = true;\n                }\n              }\n              return createElement(component, childProps);\n            }}\n          </PlayerContext.Consumer>\n        )}\n      </FullscreenContext.Consumer>\n    );\n  }\n  if (childName) {\n    PlayerContextFilter.displayName = `PlayerContextFilter(${childName})`;\n  }\n  return PlayerContextFilter;\n}\n\nexport default playerContextFilter;\n","import PlayerContextProvider from './PlayerContextProvider';\nimport PlayerContext from './PlayerContext';\nimport PlayerContextConsumer from './PlayerContextConsumer';\nimport PlayerContextGroup from './PlayerContextGroup';\nimport FullscreenContextProvider from './FullscreenContextProvider';\nimport FullscreenContext from './FullscreenContext';\nimport playerContextFilter from './playerContextFilter';\nimport * as PlayerPropTypes from './PlayerPropTypes';\n\nexport { PlayerContextProvider };\nexport { PlayerContextConsumer };\nexport { PlayerContextGroup };\nexport { FullscreenContextProvider };\nexport const FullscreenContextConsumer = FullscreenContext.Consumer;\nexport { playerContextFilter };\nexport { PlayerPropTypes };\n\n// undocumented exports\nexport * from './utils/console';\nexport {\n  default as convertToNumberWithinIntervalBounds\n} from './utils/convertToNumberWithinIntervalBounds';\nexport { default as isPlaylistValid } from './utils/isPlaylistValid';\nexport { default as getDisplayText } from './utils/getDisplayText';\nexport { repeatStrategyOptions } from './constants';\nexport const donotuse_PlayerContext = PlayerContext;\nexport const donotuse_FullscreenContext = FullscreenContext;\n"],"sourceRoot":""}